package com.abstratt.kirra.tests.mdd.runtime;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.uml2.uml.Enumeration;
import org.eclipse.uml2.uml.Stereotype;
import org.eclipse.uml2.uml.UMLPackage;

import com.abstratt.kirra.DataElement;
import com.abstratt.kirra.Entity;
import com.abstratt.kirra.KirraException;
import com.abstratt.kirra.KirraException.Kind;
import com.abstratt.kirra.Namespace;
import com.abstratt.kirra.Operation;
import com.abstratt.kirra.Parameter;
import com.abstratt.kirra.Property;
import com.abstratt.kirra.Relationship;
import com.abstratt.kirra.Repository;
import com.abstratt.kirra.Schema;
import com.abstratt.kirra.TypeRef;
import com.abstratt.kirra.TypeRef.TypeKind;
import com.abstratt.mdd.core.util.MDDExtensionUtils;
import com.abstratt.mdd.core.util.StereotypeUtils;

import junit.framework.TestCase;

public class KirraMDDRuntimeSchemaTests extends AbstractKirraMDDRuntimeTests {

    private final static String library = "package datatypes;\n" + "primitive Integer;\n" + "primitive String;\n" + "primitive Boolean;\n"
            + "end.";

    public KirraMDDRuntimeSchemaTests(String name) {
        super(name);
    }

    @Override
    public void setUp() throws Exception {
        super.setUp();
    }

    public void testAutoGeneratedProperties() throws CoreException {
        String source = "";
        source += "package mypackage;\n";
        source += "import datatypes;\n";
        source += "class Issue\n";
        source += "attribute summary : String;\n";
        source += "derived id attribute issueNumber : Integer;\n";
        source += "end;\n";
        source += "end.";
        parseAndCheck(KirraMDDRuntimeSchemaTests.library, source);
        Repository kirra = getKirra();

        Entity issue = kirra.getEntity("mypackage", "Issue");

        List<Property> issueProperties = issue.getProperties();
        TestCase.assertEquals(2, issueProperties.size());

        TestCase.assertEquals("summary", issueProperties.get(0).getName());

        TestCase.assertEquals("issueNumber", issueProperties.get(1).getName());
        TestCase.assertFalse(issueProperties.get(1).isDerived());
        TestCase.assertFalse(issueProperties.get(1).isInitializable());
        TestCase.assertFalse(issueProperties.get(1).isEditable());
        TestCase.assertTrue(issueProperties.get(1).isUnique());
        TestCase.assertTrue(issueProperties.get(1).isAutoGenerated());
    }
    
    public void testEntities() throws CoreException {
        String source = "";
        source += "package mypackage;\n";
        source += "import datatypes;\n";
        source += "apply kirra;\n";
        source += "class MyClass1 attribute singleAttribute : Integer; end;\n";
        source += "class MyClass2 attribute singleAttribute : Integer; end;\n";
        source += "end.";
        parseAndCheck(KirraMDDRuntimeSchemaTests.library, source);
        Repository kirra = getKirra();

        List<Entity> entities = kirra.getEntities("mypackage");
        TestCase.assertEquals(2, entities.size());

        // ensure order by entity name for ease of testing
        sortNamedElements(entities);

        TestCase.assertEquals("mypackage", entities.get(0).getEntityNamespace());
        TestCase.assertEquals("MyClass1", entities.get(0).getName());

        TestCase.assertEquals("mypackage", entities.get(1).getEntityNamespace());
        TestCase.assertEquals("MyClass2", entities.get(1).getName());

        kirra.getEntity("mypackage", "MyClass1");
        kirra.getEntity("mypackage", "MyClass2");
        try {
            kirra.getEntity("mypackage", "Unknown");
        } catch (KirraException e) {
            TestCase.assertEquals(KirraException.Kind.SCHEMA, e.getKind());
        }
    }
    

    public void testEntitiesWithUsers() throws CoreException {
        String source = "";
        source += "package mypackage;\n";
        source += "import datatypes;\n";
        source += "apply kirra;\n";
        source += "role class MyUserClass1 attribute singleAttribute : Integer; end;\n";
        source += "role class MyUserClass2 attribute singleAttribute : Integer; end;\n";        
        source += "class MyClass attribute singleAttribute : Integer; end;\n";
        source += "end.";
        parseAndCheck(KirraMDDRuntimeSchemaTests.library, source);
        Repository kirra = getKirra();

        List<Entity> entities = kirra.getEntities("mypackage");
        TestCase.assertEquals(3, entities.size());

        // ensure order by entity name for ease of testing
        sortNamedElements(entities);

        TestCase.assertEquals("mypackage", entities.get(0).getEntityNamespace());
        TestCase.assertEquals("MyClass", entities.get(0).getName());

        TestCase.assertEquals("mypackage", entities.get(1).getEntityNamespace());
        TestCase.assertEquals("MyUserClass1", entities.get(1).getName());

        TestCase.assertEquals("mypackage", entities.get(2).getEntityNamespace());
        TestCase.assertEquals("MyUserClass2", entities.get(2).getName());
        
        kirra.getEntity("mypackage", "MyUserClass1");
        kirra.getEntity("mypackage", "MyClass");
        Entity userData = kirra.getEntity("userprofile", "Profile");
        assertTrue(userData.isUserVisible());
        
        List<Relationship> relationships = userData.getRelationships();
        assertTrue(!relationships.isEmpty());
    }

    public void testEntityAggregationRelationships() throws CoreException {
        String model = "";
        model += "package mypackage;\n";
        model += "apply kirra;\n";
        model += "\n";
        model += "class MyClass3\n";
        model += "attribute singleAttribute : Integer;\n";
        model += "attribute children : MyClass4[*];\n";
        model += "end;\n";
        model += "\n";
        model += "class MyClass4\n";
        model += "attribute singleAttribute : Integer;\n";
        model += "attribute parent : MyClass3;\n";
        model += "end;\n";
        model += "composition navigable role MyClass3.children; navigable role MyClass4.parent; end;\n";
        model += "end.";
        parseAndCheck(model);
        Repository kirra = getKirra();

        Entity myClass3 = kirra.getEntity("mypackage", "MyClass3");
        List<Relationship> myClass3Relationships = myClass3.getRelationships();
        TestCase.assertEquals(1, myClass3Relationships.size());

        TestCase.assertEquals("children", myClass3Relationships.get(0).getName());
        TestCase.assertEquals("MyClass4", myClass3Relationships.get(0).getTypeRef().getTypeName());
        TestCase.assertFalse(myClass3Relationships.get(0).isRequired());
        TestCase.assertTrue(myClass3Relationships.get(0).isMultiple());
        TestCase.assertTrue(myClass3Relationships.get(0).isUserVisible());
        TestCase.assertTrue(myClass3Relationships.get(0).getStyle() == Relationship.Style.CHILD);
        TestCase.assertEquals("parent", myClass3Relationships.get(0).getOpposite());

        Entity myClass4 = kirra.getEntity("mypackage", "MyClass4");
        List<Relationship> myClass4Relationships = myClass4.getRelationships();
        TestCase.assertEquals(1, myClass4Relationships.size());
        TestCase.assertEquals("parent", myClass4Relationships.get(0).getName());
        TestCase.assertEquals("MyClass3", myClass4Relationships.get(0).getTypeRef().getTypeName());
        TestCase.assertTrue(myClass4Relationships.get(0).isRequired());
        TestCase.assertFalse(myClass4Relationships.get(0).isMultiple());
        TestCase.assertFalse(myClass4Relationships.get(0).isUserVisible());
    }

    public void testEntityAttributeIsReference() throws CoreException {
        String model = "";
        model += "package mypackage;\n";
        model += "import base;\n";
        model += "class MyClass1\n";
        model += "attribute ref1 : MyClass2;\n";
        model += "attribute attr1 : String;\n";
        model += "end;\n";
        model += "class MyClass2\n";
        model += "attribute attr2 : String;\n";
        model += "end;\n";
        model += "end.";
        parseAndCheck(model);
        Repository kirra = getKirra();

        Entity entity1 = kirra.getEntity("mypackage", "MyClass1");
        Entity entity2 = kirra.getEntity("mypackage", "MyClass2");

        TestCase.assertNotNull(entity1);
        TestCase.assertNotNull(entity2);

        TestCase.assertEquals(1, entity1.getProperties().size());
        TestCase.assertEquals(1, entity2.getProperties().size());

        TestCase.assertEquals(1, entity1.getRelationships().size());
        TestCase.assertEquals(0, entity2.getRelationships().size());

        TestCase.assertEquals("ref1", entity1.getRelationships().get(0).getName());
        TestCase.assertEquals(Relationship.Style.LINK, entity1.getRelationships().get(0).getStyle());
        TestCase.assertEquals(entity2.getTypeRef(), entity1.getRelationships().get(0).getTypeRef());
        TestCase.assertNull(entity1.getRelationships().get(0).getOpposite());
    }

    public void testEntityProperties() throws CoreException {
        String model = "";
        model += "package mypackage;\n";
        model += "apply kirra;\n";
        model += "import base;\n";
        model += "class MyClass1\n";
        model += "[Essential] attribute attr1 : Integer;\n";
        model += "[Essential] attribute attr2 : String;\n";
        model += "end;\n";
        model += "class MyClass2\n";
        model += "attribute attr1 : Integer[0, 1];\n";
        model += "attribute attr2 : String[0, *];\n";
        model += "attribute attr3 : String[1, *];\n";
        model += "attribute attr4 : String[1, 1];\n";
        model += "derived attribute attr5 : String[1, 1] := { \"foo\" };\n";
        model += "attribute attr6 : Picture[0, 1];\n";        
        model += "end;\n";
        model += "end.";
        parseAndCheck(model);
        Repository kirra = getKirra();

        Entity entity = kirra.getEntity("mypackage", "MyClass1");
        List<Property> properties = entity.getProperties();
        TestCase.assertEquals(2, properties.size());

        sortNamedElements(properties);

        TestCase.assertEquals("attr1", properties.get(0).getName());
        TestCase.assertEquals("Integer", properties.get(0).getTypeRef().getTypeName());

        TestCase.assertEquals("attr2", properties.get(1).getName());
        TestCase.assertEquals("String", properties.get(1).getTypeRef().getTypeName());

        entity = kirra.getEntity("mypackage", "MyClass2");
        properties = entity.getProperties();
        TestCase.assertEquals(6, properties.size());

        sortNamedElements(properties);

        TestCase.assertEquals("attr1", properties.get(0).getName());
        TestCase.assertFalse(properties.get(0).isRequired());
        TestCase.assertFalse(properties.get(0).isMultiple());
        TestCase.assertFalse(properties.get(0).isDerived());

        TestCase.assertEquals("attr2", properties.get(1).getName());
        TestCase.assertFalse(properties.get(1).isRequired());
        TestCase.assertTrue(properties.get(1).isMultiple());
        TestCase.assertFalse(properties.get(1).isDerived());

        TestCase.assertEquals("attr3", properties.get(2).getName());
        TestCase.assertTrue(properties.get(2).isRequired());
        TestCase.assertTrue(properties.get(2).isMultiple());
        TestCase.assertFalse(properties.get(2).isDerived());

        TestCase.assertEquals("attr4", properties.get(3).getName());
        TestCase.assertTrue(properties.get(3).isRequired());
        TestCase.assertFalse(properties.get(3).isMultiple());
        TestCase.assertFalse(properties.get(3).isDerived());

        TestCase.assertEquals("attr5", properties.get(4).getName());
        TestCase.assertFalse(properties.get(4).isRequired());
        TestCase.assertFalse(properties.get(4).isMultiple());
        TestCase.assertTrue(properties.get(4).isDerived());
        
        TestCase.assertEquals("attr6", properties.get(5).getName());
        TestCase.assertFalse(properties.get(5).isRequired());
        TestCase.assertFalse(properties.get(5).isMultiple());
        TestCase.assertFalse(properties.get(5).isDerived());
        TestCase.assertEquals(new TypeRef("mdd_media::Picture", TypeKind.Blob), properties.get(5).getTypeRef());
    }

    public void testEntityRelationships() throws CoreException {
        String model = "";
        model += "package mypackage;\n";
        model += "import datatypes;\n";
        model += "apply kirra;\n";
        model += "class MyClass1\n";
        model += "attribute singleAttribute : Integer;\n";
        model += "reference myClass2 : MyClass2;\n";
        model += "reference myClass3 : MyClass3[0,*];\n";
        model += "attribute myClass4 : MyClass4[0,1];\n";
        model += "attribute myClass5 : MyClass5[1,*];\n";
        model += "attribute myClass6 : MyClass6;\n";
        model += "derived attribute myClass3Derived : MyClass3[0,*] :=  { self.myClass3 };\n";
        model += "end;\n";
        model += "class MyClass2\n";
        model += "attribute singleAttribute : Integer;\n";
        model += "end;\n";
        model += "class MyClass3\n";
        model += "attribute singleAttribute : Integer;\n";
        model += "end;\n";
        model += "class MyClass4\n";
        model += "attribute singleAttribute : Integer;\n";
        model += "end;\n";
        model += "class MyClass5\n";
        model += "attribute singleAttribute : Integer;\n";
        model += "end;\n";
        model += "abstract class MyClass6\n";
        model += "attribute singleAttribute : Integer;\n";
        model += "end;\n";
        model += "class MyClass7\n";
        model += "attribute singleAttribute : Integer;\n";
        model += "end;\n";
        model += "association !navigable role MyClass1.myClass4; !navigable role myClass1 : MyClass1; end;\n";
        model += "association !navigable role MyClass1.myClass5; !navigable role myClass1 : MyClass1; end;\n";
        model += "association !navigable role myRole3 : MyClass3; navigable role myRole2 : MyClass2[1,*]; end;\n";
        model += "association navigable role myRole2 : MyClass2[1,*]; !navigable role myRole7 : MyClass7; end;\n";
        model += "association navigable role myRole4 : MyClass4[*]; navigable role myRole5 : MyClass5[*]; end;\n";
        model += "end.";
        parseAndCheck(KirraMDDRuntimeSchemaTests.library, model);
        Repository kirra = getKirra();

        Entity myClass1 = kirra.getEntity("mypackage", "MyClass1");
        List<Relationship> myClass1Relationships = myClass1.getRelationships();
        TestCase.assertEquals(myClass1Relationships.toString(), 6, myClass1Relationships.size());

        sortNamedElements(myClass1Relationships);

        int index = 0;
        TestCase.assertEquals("myClass2", myClass1Relationships.get(index).getName());
        TestCase.assertEquals("MyClass2", myClass1Relationships.get(index).getTypeRef().getTypeName());
        TestCase.assertTrue(myClass1Relationships.get(index).isRequired());
        TestCase.assertFalse(myClass1Relationships.get(index).isMultiple());
        TestCase.assertTrue(myClass1Relationships.get(index).isUserVisible());
        TestCase.assertFalse(myClass1Relationships.get(index).isDerived());

        index++;
        TestCase.assertEquals("myClass3", myClass1Relationships.get(index).getName());
        TestCase.assertEquals("MyClass3", myClass1Relationships.get(index).getTypeRef().getTypeName());
        TestCase.assertFalse(myClass1Relationships.get(index).isRequired());
        TestCase.assertTrue(myClass1Relationships.get(index).isMultiple());
        TestCase.assertTrue(myClass1Relationships.get(index).isUserVisible());
        TestCase.assertFalse(myClass1Relationships.get(index).isDerived());

        index++;
        TestCase.assertEquals("myClass3Derived", myClass1Relationships.get(index).getName());
        TestCase.assertEquals("MyClass3", myClass1Relationships.get(index).getTypeRef().getTypeName());
        TestCase.assertFalse(myClass1Relationships.get(index).isRequired());
        TestCase.assertTrue(myClass1Relationships.get(index).isMultiple());
        TestCase.assertTrue(myClass1Relationships.get(index).isUserVisible());
        TestCase.assertTrue(myClass1Relationships.get(index).isDerived());

        index++;
        TestCase.assertEquals("myClass4", myClass1Relationships.get(index).getName());
        TestCase.assertEquals("MyClass4", myClass1Relationships.get(index).getTypeRef().getTypeName());
        TestCase.assertFalse(myClass1Relationships.get(index).isRequired());
        TestCase.assertFalse(myClass1Relationships.get(index).isMultiple());
        TestCase.assertTrue(myClass1Relationships.get(index).isUserVisible());
        TestCase.assertFalse(myClass1Relationships.get(index).isDerived());

        index++;
        TestCase.assertEquals("myClass5", myClass1Relationships.get(index).getName());
        TestCase.assertEquals("MyClass5", myClass1Relationships.get(index).getTypeRef().getTypeName());
        TestCase.assertTrue(myClass1Relationships.get(index).isRequired());
        TestCase.assertTrue(myClass1Relationships.get(index).isMultiple());
        TestCase.assertTrue(myClass1Relationships.get(index).isUserVisible());
        TestCase.assertFalse(myClass1Relationships.get(index).isDerived());

        index++;
        TestCase.assertEquals("myClass6", myClass1Relationships.get(index).getName());
        TestCase.assertEquals("MyClass6", myClass1Relationships.get(index).getTypeRef().getTypeName());
        TestCase.assertTrue(myClass1Relationships.get(index).isRequired());
        TestCase.assertFalse(myClass1Relationships.get(index).isMultiple());
        TestCase.assertTrue(myClass1Relationships.get(index).isUserVisible());
        TestCase.assertFalse(myClass1Relationships.get(index).isDerived());

        Entity myClass3 = kirra.getEntity("mypackage", "MyClass3");
        List<Relationship> myClass3Relationships = myClass3.getRelationships();
        TestCase.assertEquals(myClass3Relationships.toString(), 1, myClass3Relationships.size());
        TestCase.assertEquals("myRole2", myClass3Relationships.get(0).getName());
        TestCase.assertEquals("MyClass2", myClass3Relationships.get(0).getTypeRef().getTypeName());
        TestCase.assertTrue(myClass3Relationships.get(0).isPrimary());
        TestCase.assertTrue(myClass3Relationships.get(0).isRequired());
        TestCase.assertTrue(myClass3Relationships.get(0).isMultiple());
        TestCase.assertTrue(myClass3Relationships.get(0).isUserVisible());
        TestCase.assertFalse(myClass3Relationships.get(0).isDerived());

        Entity myClass4 = kirra.getEntity("mypackage", "MyClass4");
        List<Relationship> myClass4Relationships = myClass4.getRelationships();
        TestCase.assertEquals(myClass4Relationships.toString(), 2, myClass4Relationships.size());
        TestCase.assertEquals("myClass1", myClass4Relationships.get(0).getName());
        TestCase.assertEquals("myRole5", myClass4Relationships.get(1).getName());
        TestCase.assertEquals("MyClass1", myClass4Relationships.get(0).getTypeRef().getTypeName());
        TestCase.assertEquals("MyClass5", myClass4Relationships.get(1).getTypeRef().getTypeName());

        TestCase.assertTrue(myClass4Relationships.get(0).isRequired());
        TestCase.assertFalse(myClass4Relationships.get(0).isMultiple());
        TestCase.assertFalse(myClass4Relationships.get(0).isUserVisible());
        TestCase.assertFalse(myClass4Relationships.get(0).isDerived());
        TestCase.assertFalse(myClass4Relationships.get(0).isNavigable());

        TestCase.assertFalse(myClass4Relationships.get(1).isRequired());
        TestCase.assertTrue(myClass4Relationships.get(1).isMultiple());
        TestCase.assertTrue(myClass4Relationships.get(1).isUserVisible());
        TestCase.assertFalse(myClass4Relationships.get(1).isDerived());
        TestCase.assertTrue(myClass4Relationships.get(1).isNavigable());

        Entity myClass5 = kirra.getEntity("mypackage", "MyClass5");
        List<Relationship> myClass5Relationships = myClass5.getRelationships();
        TestCase.assertEquals(myClass5Relationships.toString(), 2, myClass5Relationships.size());
        TestCase.assertEquals("myClass1", myClass5Relationships.get(0).getName());
        TestCase.assertEquals("myRole4", myClass5Relationships.get(1).getName());
        TestCase.assertEquals("MyClass1", myClass5Relationships.get(0).getTypeRef().getTypeName());
        TestCase.assertEquals("MyClass4", myClass5Relationships.get(1).getTypeRef().getTypeName());

        TestCase.assertTrue(myClass5Relationships.get(0).isRequired());
        TestCase.assertFalse(myClass5Relationships.get(0).isMultiple());
        TestCase.assertFalse(myClass5Relationships.get(0).isUserVisible());
        TestCase.assertFalse(myClass5Relationships.get(0).isDerived());

        TestCase.assertFalse(myClass5Relationships.get(1).isRequired());
        TestCase.assertTrue(myClass5Relationships.get(1).isMultiple());
        TestCase.assertTrue(myClass5Relationships.get(1).isUserVisible());
        TestCase.assertFalse(myClass5Relationships.get(1).isDerived());

        index++;
        Entity myClass7 = kirra.getEntity("mypackage", "MyClass7");
        List<Relationship> myClass7Relationships = myClass7.getRelationships();
        TestCase.assertEquals(myClass7Relationships.toString(), 1, myClass7Relationships.size());
        TestCase.assertEquals("myRole2", myClass7Relationships.get(0).getName());
        TestCase.assertEquals("MyClass2", myClass7Relationships.get(0).getTypeRef().getTypeName());
        TestCase.assertTrue(myClass7Relationships.get(0).isPrimary());
        TestCase.assertTrue(myClass7Relationships.get(0).isRequired());
        TestCase.assertTrue(myClass7Relationships.get(0).isMultiple());
        TestCase.assertTrue(myClass7Relationships.get(0).isUserVisible());
        TestCase.assertFalse(myClass7Relationships.get(0).isDerived());

        Entity myClass2 = kirra.getEntity("mypackage", "MyClass2");
        List<Relationship> myClass2Relationships = myClass2.getRelationships();
        TestCase.assertEquals(myClass2Relationships.toString(), 2, myClass2Relationships.size());
        TestCase.assertEquals("myRole3", myClass2Relationships.get(0).getName());
        TestCase.assertEquals("myRole7", myClass2Relationships.get(1).getName());
        TestCase.assertEquals("MyClass3", myClass2Relationships.get(0).getTypeRef().getTypeName());
        TestCase.assertEquals("MyClass7", myClass2Relationships.get(1).getTypeRef().getTypeName());

        TestCase.assertTrue(myClass2Relationships.get(0).isRequired());
        TestCase.assertFalse(myClass2Relationships.get(0).isMultiple());
        TestCase.assertFalse(myClass2Relationships.get(0).isUserVisible());
        TestCase.assertFalse(myClass2Relationships.get(0).isDerived());
        TestCase.assertFalse(myClass2Relationships.get(0).isNavigable());
        TestCase.assertFalse(myClass2Relationships.get(0).isPrimary());

        TestCase.assertTrue(myClass2Relationships.get(1).isRequired());
        TestCase.assertFalse(myClass2Relationships.get(1).isMultiple());
        TestCase.assertFalse(myClass2Relationships.get(1).isUserVisible());
        TestCase.assertFalse(myClass2Relationships.get(1).isDerived());
        TestCase.assertFalse(myClass2Relationships.get(1).isNavigable());
        TestCase.assertFalse(myClass2Relationships.get(1).isPrimary());
    }

    public void testEntityRelationships_NonNavigableMemberEnd() throws CoreException {
        String source = "";
        source += "package mypackage;\n";
        source += "import datatypes;\n";
        source += "class Make\n";
        source += "attribute name : String;\n";
        source += "end;\n";
        source += "class Model\n";
        source += "attribute name : String;\n";
        source += "attribute make : Make;\n";
        source += "end;\n";
        source += "association\n";
        source += "!navigable role models : Model[*];\n";
        source += "role Model.make;\n";
        source += "end;\n";
        source += "end.";
        parseAndCheck(KirraMDDRuntimeSchemaTests.library, source);
        Repository kirra = getKirra();

        Entity make = kirra.getEntity("mypackage", "Make");
        Entity model = kirra.getEntity("mypackage", "Model");

        TestCase.assertEquals(1, make.getProperties().size());
        TestCase.assertEquals(1, make.getRelationships().size());

        TestCase.assertEquals(1, model.getProperties().size());
        TestCase.assertEquals(1, model.getRelationships().size());

        Relationship modelMake = model.getRelationship("make");
        TestCase.assertNotNull(modelMake);
        TestCase.assertTrue(modelMake.isNavigable());

        Relationship makeModels = make.getRelationship("models");
        TestCase.assertNotNull(makeModels);

        TestCase.assertNotNull(modelMake.getOpposite());

        Relationship opposite = kirra.getOpposite(modelMake);

        TestCase.assertNotNull(opposite);
        TestCase.assertEquals(makeModels.getName(), opposite.getName());
        TestCase.assertTrue(!opposite.isNavigable());
    }

    public void testEntityRelationships_Reflective() throws CoreException {
        String source = "";
        source += "package mypackage;\n";
        source += "import datatypes;\n";
        source += "class User\n";
        source += "attribute name : String;\n";
        source += "end;\n";
        source += "association Friendship\n";
        source += "navigable role peer1 : User;\n";
        source += "navigable role peer2 : User;\n";
        source += "end;\n";
        source += "end.";
        parseAndCheck(KirraMDDRuntimeSchemaTests.library, source);
        Repository kirra = getKirra();

        Entity user = kirra.getEntity("mypackage", "User");

        List<Relationship> relationships = user.getRelationships();
        TestCase.assertEquals(2, relationships.size());

        TestCase.assertEquals("peer1", relationships.get(0).getName());
        TestCase.assertEquals("peer2", relationships.get(0).getOpposite());
        TestCase.assertEquals("peer2", relationships.get(1).getName());
        TestCase.assertEquals("peer1", relationships.get(1).getOpposite());
    }
    
    public void testEntityProperties_Inherited() throws CoreException {
        String source = "";
        source += "package mypackage;\n";
        source += "import datatypes;\n";
        source += "class Class1\n";
        source += "attribute attr1 : String;\n";
        source += "end;\n";
        source += "class Class2 specializes Class1\n";
        source += "end;\n";
        source += "class Class3 specializes Class1\n";
        source += "attribute attr1 : String;\n";
        source += "end;\n";
        source += "class Class4 specializes Class2\n";
        source += "end;\n";                
        source += "end.";
        parseAndCheck(KirraMDDRuntimeSchemaTests.library, source);
        Repository kirra = getKirra();

        Entity class1 = kirra.getEntity("mypackage", "Class1");
        Entity class2 = kirra.getEntity("mypackage", "Class2");
        Entity class3 = kirra.getEntity("mypackage", "Class3");
        Entity class4 = kirra.getEntity("mypackage", "Class4");

        List<Property> class1Properties = class1.getProperties();
        List<Property> class2Properties = class2.getProperties();
        List<Property> class3Properties = class3.getProperties();
        List<Property> class4Properties = class4.getProperties();
        assertEquals(1, class1Properties.size());
        assertEquals(1, class2Properties.size());
        assertEquals(1, class3Properties.size());
        assertEquals(1, class4Properties.size());

        assertTrue(!class1.getProperties().get(0).isInherited());
        assertTrue(class2.getProperties().get(0).isInherited());
        assertTrue(!class3.getProperties().get(0).isInherited());
        assertTrue(class4.getProperties().get(0).isInherited());
    }


    public void testEnumeration() throws CoreException {
        String model = "";
        model += "package mypackage;\n";
        model += "apply kirra;\n";
        model += "enumeration Enum1 value1; value2; value3; end;\n";
        model += "class MyClass\n";
        model += "attribute attr1 : Enum1;\n";
        model += "end;\n";
        model += "end.";
        parseAndCheck(model);
        Repository kirra = getKirra();

        Entity entity = kirra.getEntity("mypackage", "MyClass");
        DataElement attr1 = findNamedElement(entity.getProperties(), "attr1");
        TestCase.assertEquals("Enum1", attr1.getTypeRef().getTypeName());
        TestCase.assertEquals(TypeKind.Enumeration, attr1.getTypeRef().getKind());
        TestCase.assertEquals(3, attr1.getEnumerationLiterals().size());
        List<String> expected = Arrays.asList("value1", "value2", "value3");
		Set<String> actual = attr1.getEnumerationLiterals().keySet();
		TestCase.assertTrue(actual.toString(), actual.containsAll(expected));

        try {
            kirra.getEntity("mypackage", "Enum1");
            TestCase.fail("Enumerations are not entities");
        } catch (KirraException e) {
            TestCase.assertEquals(Kind.SCHEMA, e.getKind());
        }

        Enumeration enum1 = this.getRepository().findNamedElement("mypackage::Enum1", UMLPackage.Literals.ENUMERATION, null);
        TestCase.assertNotNull(enum1);
        List<Stereotype> appliedStereotypes = new ArrayList<Stereotype>(enum1.getAppliedStereotypes());
        appliedStereotypes.remove(StereotypeUtils.findStereotype(MDDExtensionUtils.DEBUGGABLE_STEREOTYPE));
        TestCase.assertEquals(appliedStereotypes.toString(), 0, appliedStereotypes.size());
    }

    public void testInheritance() throws CoreException {
        String source = "";
        source += "package mypackage;\n";
        source += "abstract class BaseClass\n";
        source += "attribute attr1 : Integer;\n";
        source += "operation op1();\n";
        source += "end;\n";
        source += "class ConcreteClass specializes BaseClass end;\n";
        source += "end.";
        parseAndCheck(source);
        Repository kirra = getKirra();
        List<Entity> entities = kirra.getEntities("mypackage");
        TestCase.assertEquals(2, entities.size());
        Entity concreteEntity = kirra.getEntity("mypackage", "ConcreteClass");
        TestCase.assertEquals("ConcreteClass", concreteEntity.getName());
        TestCase.assertTrue(concreteEntity.isConcrete());
        TestCase.assertEquals(1, concreteEntity.getOperations().size());
        TestCase.assertEquals("op1", concreteEntity.getOperations().get(0).getName());
        TestCase.assertEquals(1, concreteEntity.getProperties().size());
        TestCase.assertEquals("attr1", concreteEntity.getProperties().get(0).getName());

        Entity abstractEntity = kirra.getEntity("mypackage", "BaseClass");
        TestCase.assertFalse(abstractEntity.isConcrete());
    }

    public void testNamespaces() throws CoreException {
        parseAndCheck("package pack1;end.", "package pack2;end.",
                "package pack3;apply kirra;class Class1 attribute singleAttribute : Integer; end; end.");

        TestCase.assertNotNull(getRepository().findPackage("mdd_extensions", UMLPackage.Literals.PROFILE));
        TestCase.assertNotNull(getRepository().findPackage("kirra", UMLPackage.Literals.PROFILE));

        Repository kirra = getKirra();
        List<String> namespaces = kirra.getNamespaces();
        // profile is not expected to show
        TestCase.assertFalse(namespaces.contains("kirra"));
        TestCase.assertEquals(2, namespaces.size());
        TestCase.assertTrue(namespaces.contains("pack3"));
        TestCase.assertTrue(namespaces.contains("userprofile"));
    }

    public void testOperations() throws CoreException {

        String model = "";
        model += "package mypackage;\n";
        model += "apply kirra;\n";
        model += "import datatypes;\n";
        model += "class MyClass1\n";
        model += "attribute singleAttribute : Integer;\n";
        model += "constructor \\create1(someValue : Integer);\n";
        model += "operation action1();\n";
        model += "operation action2(par1 : Integer, par2 : Boolean) : String;\n";
        model += "operation action3() : MyClass1[*];\n";
        model += "static operation action4();\n";
        model += "private operation nonaction2(par1 : Integer, par2 : Boolean) : String;\n";
        model += "static query query1(par1 : Integer, par2 : Boolean) : MyClass1[*];\n";
        model += "private operation nonQuery1(par1 : Integer, par2 : Boolean) : MyClass1[*];\n";
        model += "end;\n";
        model += "end.";
        parseAndCheck(model, KirraMDDRuntimeSchemaTests.library);

        Repository kirra = getKirra();

        Entity entity = kirra.getEntity("mypackage", "MyClass1");
        List<Operation> operations = entity.getOperations();
        TestCase.assertEquals(6, operations.size());

        sortNamedElements(operations);

        TestCase.assertEquals("action1", operations.get(0).getName());
        TestCase.assertNull(operations.get(0).getTypeRef());
        TestCase.assertEquals(Operation.OperationKind.Action, operations.get(0).getKind());
        TestCase.assertTrue(operations.get(0).isInstanceOperation());
        TestCase.assertEquals(0, operations.get(0).getParameters().size());

        TestCase.assertEquals("action2", operations.get(1).getName());
        TestCase.assertEquals("String", operations.get(1).getTypeRef().getTypeName());
        TestCase.assertEquals(Operation.OperationKind.Action, operations.get(1).getKind());
        TestCase.assertTrue(operations.get(1).isInstanceOperation());
        TestCase.assertEquals(2, operations.get(1).getParameters().size());

        final List<Parameter> operationParameters = operations.get(1).getParameters();
        sortNamedElements(operationParameters);

        TestCase.assertEquals("par1", operationParameters.get(0).getName());
        TestCase.assertEquals("Integer", operationParameters.get(0).getTypeRef().getTypeName());

        TestCase.assertEquals("par2", operationParameters.get(1).getName());
        TestCase.assertEquals("Boolean", operationParameters.get(1).getTypeRef().getTypeName());

        TestCase.assertEquals("action3", operations.get(2).getName());
        TestCase.assertEquals("MyClass1", operations.get(2).getTypeRef().getTypeName());
        TestCase.assertEquals(Operation.OperationKind.Action, operations.get(2).getKind());
        TestCase.assertTrue(operations.get(2).isInstanceOperation());
        TestCase.assertEquals(0, operations.get(2).getParameters().size());

        TestCase.assertEquals("action4", operations.get(3).getName());
        TestCase.assertNull("MyClass1", operations.get(3).getTypeRef());
        TestCase.assertEquals(Operation.OperationKind.Action, operations.get(3).getKind());
        TestCase.assertFalse(operations.get(3).isInstanceOperation());
        TestCase.assertEquals(0, operations.get(3).getParameters().size());

        TestCase.assertEquals("create1", operations.get(4).getName());
        TestCase.assertEquals("MyClass1", operations.get(4).getTypeRef().getTypeName());
        TestCase.assertEquals(Operation.OperationKind.Construtor, operations.get(4).getKind());
        TestCase.assertFalse(operations.get(4).isInstanceOperation());
        TestCase.assertEquals(1, operations.get(4).getParameters().size());
        TestCase.assertEquals("mypackage.MyClass1", operations.get(4).getTypeRef().getFullName());
        
        TestCase.assertEquals("query1", operations.get(5).getName());
        TestCase.assertEquals("MyClass1", operations.get(5).getTypeRef().getTypeName());
        TestCase.assertEquals(Operation.OperationKind.Finder, operations.get(5).getKind());
        TestCase.assertFalse(operations.get(5).isInstanceOperation());
        TestCase.assertEquals(2, operations.get(5).getParameters().size());
    }

    public void testSchema() throws CoreException {
        String model1 = "package pack1;apply kirra;class Class1 attribute singleAttribute : Integer; end; end.";
        String model2 = "package pack2;apply kirra;class Class2 attribute singleAttribute : Integer; end; end.";
        String model3 = "package pack2;apply kirra;end.";
        parseAndCheck(model1, model2, model3, KirraMDDRuntimeSchemaTests.library);
        Repository kirra = getKirra();

        Schema schema = kirra.getSchema();
        TestCase.assertNotNull(schema);

        List<Namespace> namespaces = schema.getNamespaces();
        TestCase.assertEquals(namespaces.toString(), 3, namespaces.size());
        sortNamedElements(namespaces);
        TestCase.assertEquals("pack1", namespaces.get(0).getName());
        TestCase.assertEquals("pack2", namespaces.get(1).getName());
        TestCase.assertEquals("userprofile", namespaces.get(2).getName());

        List<Entity> namespace1Entities = namespaces.get(0).getEntities();
        TestCase.assertEquals(1, namespace1Entities.size());
        TestCase.assertEquals("pack1", namespace1Entities.get(0).getEntityNamespace());
        TestCase.assertEquals("Class1", namespace1Entities.get(0).getName());

        List<Entity> namespace2Entities = namespaces.get(1).getEntities();
        // not expected to see Class3 as it is attribute-less
        TestCase.assertEquals(1, namespace2Entities.size());
        TestCase.assertEquals("pack2", namespace2Entities.get(0).getEntityNamespace());
        TestCase.assertEquals("Class2", namespace2Entities.get(0).getName());
        
        List<Entity> namespace3Entities = namespaces.get(2).getEntities();
        TestCase.assertEquals(1, namespace3Entities.size());
        TestCase.assertEquals("userprofile", namespace3Entities.get(0).getEntityNamespace());
        TestCase.assertEquals("Profile", namespace3Entities.get(0).getName());
    }

}
