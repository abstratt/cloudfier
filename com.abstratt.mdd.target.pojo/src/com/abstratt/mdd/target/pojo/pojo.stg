group pojo;

visibility(namedElement) ::= <<
<namedElement.visibility>
>>

packageDecl(package) ::= <<
package <package.qualifiedName>;
>>

topLevel(class) ::= <<
<packageDecl(package=class.nearestPackage)>

<class.javaImportedTypes:packageImport(); separator="\n">

<class.javaAnnotations:annotation(); separator="\n">
<visibility(class)> class <class.name> {
    <class.ownedAttributes:attribute()>
    <class.ownedAttributes:setterAndGetter()>
    <class.ownedOperations:operation()>
}
>>

annotation(annotation) ::= <<
@<annotation.name><if(annotation.valueMap)>(<annotation.valueMap.keys:{k| <k>=<annotation.valueMap.(k)>}; separator=", ">)<endif>
>>

annotationAttribute(key,value) ::= <<
<key>=<value>
>>


packageImport(importedType) ::= <<
import <importedType>;
>>

attribute(attribute) ::= <<
<if(!attribute.derived)>
private <attribute:typeName()> <attribute.name><attribute:initialization()>;

<endif>
>>

initialization(attribute) ::= <<
<if(attribute.defaultValue)>
 = <attribute.defaultValue.stringValue>
<endif>
>>

setterAndGetter(attribute) ::= <<
<if(attribute.public)>
<if(!attribute.derived)>
<attribute:getter()>
<if(!attribute.readOnly)>
<attribute:setter()><\n>
<endif>
<endif>
<if(attribute.derived)>
<attribute:derivedGetter()>
<endif>
<endif>
>>

typeName(typedElement) ::= <<
<if(typedElement.multivalued)><typedElement:collectionType()>\<<typedElement.type.name>\><else><typedElement.type.name><endif>
>>

collectionType(multiplicityElement) ::= <<
<if(multiplicityElement.ordered)>
List
<else>
<if(multiplicityElement.unique)>Set<else>Collection<endif>
<endif>
>>

getter(attribute) ::= <<

<attribute.javaGetterAnnotations:annotation(); separator="\n">
public <attribute:typeName()> get<attribute.name;format="capitalize">() {
    return this.<attribute.name>; 
}>>

setter(attribute) ::= <<
public void set<attribute.name;format="capitalize">(<attribute:typeName()> <attribute.name>) {
    this.<attribute.name> = <attribute.name>; 
}>>

operation(operation) ::= <<
<operation:visibility()> <operation:returnType()> <operation.name>(<operation:parameterList()>) <operation:method()>
>>

parameterList(operation) ::= <<
<operation.ownedParameters:parameter(); separator=", ">
>>

parameter(parameter) ::= <<
<if(!parameter.return)><parameter:typeName()> <parameter.name><endif>
>>


returnType(operation) ::= <<
<if(operation.type)><operation:typeName()><else>void<endif>
>>

method(operationOrAttribute) ::= <<
<operationOrAttribute.method>
>>

derivedGetter(attribute) ::= <<
public <attribute:typeName()> get<attribute.name;format="capitalize">() <attribute:method()>
>>