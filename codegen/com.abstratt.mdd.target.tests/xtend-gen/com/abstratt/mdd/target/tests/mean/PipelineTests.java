package com.abstratt.mdd.target.tests.mean;

import com.abstratt.mdd.core.IRepository;
import com.abstratt.mdd.core.util.ActivityUtils;
import com.abstratt.mdd.target.mean.ActivityContext;
import com.abstratt.mdd.target.mean.ApplicationContext;
import com.abstratt.mdd.target.mean.ModelGenerator;
import com.abstratt.mdd.target.tests.AbstractGeneratorTest;
import java.io.IOException;
import java.util.function.Consumer;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.uml2.uml.Activity;
import org.eclipse.uml2.uml.AddVariableValueAction;
import org.eclipse.uml2.uml.Behavior;
import org.eclipse.uml2.uml.CallOperationAction;
import org.eclipse.uml2.uml.Operation;
import org.eclipse.uml2.uml.Property;
import org.eclipse.uml2.uml.ReadStructuralFeatureAction;
import org.eclipse.uml2.uml.StructuralFeature;
import org.eclipse.uml2.uml.StructuredActivityNode;
import org.eclipse.uml2.uml.UMLPackage;
import org.eclipse.uml2.uml.ValueSpecification;
import org.eclipse.uml2.uml.Variable;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class PipelineTests extends AbstractGeneratorTest {
  public static Test suite() {
    return new TestSuite(PipelineTests.class);
  }
  
  public PipelineTests(final String name) {
    super(name);
  }
  
  public void testBasic() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model banking;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("class Account");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attribute balance : Double;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("operation deposit(amount : Double);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("self.balance := self.balance + amount;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("operation withdraw(amount : Double);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("self.balance := self.balance - amount;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("operation transfer(destination : Account, amount : Double) : Double;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("self.withdraw(amount);");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("destination.deposit(amount);");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("return self.balance;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Operation operation = this.getOperation("banking::Account::transfer");
    final ApplicationContext application = new ApplicationContext();
    EList<Behavior> _methods = operation.getMethods();
    Behavior _head = IterableExtensions.<Behavior>head(_methods);
    final Activity activity = ((Activity) _head);
    application.newActivityContext(activity);
    ActivityContext _activityContext = application.getActivityContext();
    StructuredActivityNode _rootAction = ActivityUtils.getRootAction(activity);
    _activityContext.buildPipeline(_rootAction);
    ActivityContext _activityContext_1 = application.getActivityContext();
    final ActivityContext.Stage rootStage = _activityContext_1.rootStage;
    TestCase.assertNotNull(rootStage);
    int _size = rootStage.substages.size();
    TestCase.assertEquals(3, _size);
    ActivityContext.Stage _get = rootStage.substages.get(0);
    EClass _eClass = _get.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.CALL_OPERATION_ACTION, _eClass);
    ActivityContext.Stage _get_1 = rootStage.substages.get(0);
    Operation _operation = ((CallOperationAction) _get_1.rootAction).getOperation();
    String _name = _operation.getName();
    TestCase.assertEquals("withdraw", _name);
    ActivityContext.Stage _get_2 = rootStage.substages.get(1);
    EClass _eClass_1 = _get_2.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.CALL_OPERATION_ACTION, _eClass_1);
    ActivityContext.Stage _get_3 = rootStage.substages.get(1);
    Operation _operation_1 = ((CallOperationAction) _get_3.rootAction).getOperation();
    String _name_1 = _operation_1.getName();
    TestCase.assertEquals("deposit", _name_1);
    ActivityContext.Stage _get_4 = rootStage.substages.get(2);
    EClass _eClass_2 = _get_4.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.ADD_VARIABLE_VALUE_ACTION, _eClass_2);
    ActivityContext.Stage _get_5 = rootStage.substages.get(2);
    Variable _variable = ((AddVariableValueAction) _get_5.rootAction).getVariable();
    String _name_2 = _variable.getName();
    TestCase.assertEquals("", _name_2);
    final Consumer<ActivityContext.Stage> _function = new Consumer<ActivityContext.Stage>() {
      public void accept(final ActivityContext.Stage it) {
        boolean _isEmpty = it.substages.isEmpty();
        TestCase.assertTrue(_isEmpty);
      }
    };
    rootStage.substages.forEach(_function);
  }
  
  public void testReadExtent() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model banking;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("class Account");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attribute balance : Double;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("query allAccounts() : Account[*];");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("return Account extent;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Operation operation = this.getOperation("banking::Account::allAccounts");
    final ApplicationContext application = new ApplicationContext();
    EList<Behavior> _methods = operation.getMethods();
    Behavior _head = IterableExtensions.<Behavior>head(_methods);
    final Activity activity = ((Activity) _head);
    application.newActivityContext(activity);
    ActivityContext _activityContext = application.getActivityContext();
    StructuredActivityNode _rootAction = ActivityUtils.getRootAction(activity);
    _activityContext.buildPipeline(_rootAction);
    ActivityContext _activityContext_1 = application.getActivityContext();
    final ActivityContext.Stage rootStage = _activityContext_1.rootStage;
    TestCase.assertNotNull(rootStage);
    int _size = rootStage.substages.size();
    TestCase.assertEquals(1, _size);
    ActivityContext.Stage _get = rootStage.substages.get(0);
    EClass _eClass = _get.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.READ_EXTENT_ACTION, _eClass);
    final Consumer<ActivityContext.Stage> _function = new Consumer<ActivityContext.Stage>() {
      public void accept(final ActivityContext.Stage it) {
        boolean _isEmpty = it.substages.isEmpty();
        TestCase.assertTrue(_isEmpty);
      }
    };
    rootStage.substages.forEach(_function);
  }
  
  public void testBatchUpdate() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model banking;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("class Account");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attribute balance : Double;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("static operation payInterest(rate : Double);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("Account extent.forEach((a : Account) {");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("a.balance := a.balance * rate;");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Operation operation = this.getOperation("banking::Account::payInterest");
    final ApplicationContext application = new ApplicationContext();
    EList<Behavior> _methods = operation.getMethods();
    Behavior _head = IterableExtensions.<Behavior>head(_methods);
    final Activity activity = ((Activity) _head);
    application.newActivityContext(activity);
    ActivityContext _activityContext = application.getActivityContext();
    StructuredActivityNode _rootAction = ActivityUtils.getRootAction(activity);
    _activityContext.buildPipeline(_rootAction);
    ActivityContext _activityContext_1 = application.getActivityContext();
    final ActivityContext.Stage rootStage = _activityContext_1.rootStage;
    TestCase.assertNotNull(rootStage);
    EClass _eClass = rootStage.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.STRUCTURED_ACTIVITY_NODE, _eClass);
    int _size = rootStage.substages.size();
    TestCase.assertEquals(1, _size);
    ActivityContext.Stage _get = rootStage.substages.get(0);
    EClass _eClass_1 = _get.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.READ_EXTENT_ACTION, _eClass_1);
    final Consumer<ActivityContext.Stage> _function = new Consumer<ActivityContext.Stage>() {
      public void accept(final ActivityContext.Stage it) {
        boolean _isEmpty = it.substages.isEmpty();
        TestCase.assertTrue(_isEmpty);
      }
    };
    rootStage.substages.forEach(_function);
  }
  
  public void testDerivedAttribute() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model banking;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("class Customer attribute name : String; end;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("class Account");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attribute number : String;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("reference customer : Customer;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("derived attribute title : String := { self.customer.name + \" - \" + self.number };");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Property attribute = this.getProperty("banking::Account::title");
    final ApplicationContext application = new ApplicationContext();
    ValueSpecification _defaultValue = attribute.getDefaultValue();
    Behavior _resolveBehaviorReference = ActivityUtils.resolveBehaviorReference(_defaultValue);
    final Activity activity = ((Activity) _resolveBehaviorReference);
    application.newActivityContext(activity);
    ActivityContext _activityContext = application.getActivityContext();
    StructuredActivityNode _rootAction = ActivityUtils.getRootAction(activity);
    _activityContext.buildPipeline(_rootAction);
    ActivityContext _activityContext_1 = application.getActivityContext();
    final ActivityContext.Stage rootStage = _activityContext_1.rootStage;
    String _string = rootStage.toString();
    InputOutput.<String>println(_string);
    IRepository _repository = this.getRepository();
    ModelGenerator _modelGenerator = new ModelGenerator(_repository);
    CharSequence _generateDerivedAttribute = _modelGenerator.generateDerivedAttribute(attribute);
    InputOutput.<CharSequence>println(_generateDerivedAttribute);
    TestCase.assertNotNull(rootStage);
    EClass _eClass = rootStage.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.STRUCTURED_ACTIVITY_NODE, _eClass);
    int _size = rootStage.substages.size();
    TestCase.assertEquals(1, _size);
    ActivityContext.Stage _get = rootStage.substages.get(0);
    EClass _eClass_1 = _get.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.READ_STRUCTURAL_FEATURE_ACTION, _eClass_1);
    ActivityContext.Stage _get_1 = rootStage.substages.get(0);
    StructuralFeature _structuralFeature = ((ReadStructuralFeatureAction) _get_1.rootAction).getStructuralFeature();
    String _name = _structuralFeature.getName();
    TestCase.assertEquals("customer", _name);
    ActivityContext.Stage _get_2 = rootStage.substages.get(0);
    boolean _isEmpty = _get_2.substages.isEmpty();
    TestCase.assertTrue(_isEmpty);
  }
  
  public void testDoubleDerivedAttribute() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model banking;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("class Title attribute name : String; end;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("class Customer ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attribute name : String;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("reference title : Title;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("derived attribute description : String := { self.title.name + \" \" + self.name };");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("class Account");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attribute number : String;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("reference customer : Customer;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("derived attribute title : String := { self.customer.description + \" - \" + self.number };");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Property attribute = this.getProperty("banking::Account::title");
    final ApplicationContext application = new ApplicationContext();
    ValueSpecification _defaultValue = attribute.getDefaultValue();
    Behavior _resolveBehaviorReference = ActivityUtils.resolveBehaviorReference(_defaultValue);
    final Activity activity = ((Activity) _resolveBehaviorReference);
    application.newActivityContext(activity);
    ActivityContext _activityContext = application.getActivityContext();
    StructuredActivityNode _rootAction = ActivityUtils.getRootAction(activity);
    _activityContext.buildPipeline(_rootAction);
    ActivityContext _activityContext_1 = application.getActivityContext();
    final ActivityContext.Stage rootStage = _activityContext_1.rootStage;
    String _string = rootStage.toString();
    InputOutput.<String>println(_string);
    IRepository _repository = this.getRepository();
    ModelGenerator _modelGenerator = new ModelGenerator(_repository);
    CharSequence _generateDerivedAttribute = _modelGenerator.generateDerivedAttribute(attribute);
    InputOutput.<CharSequence>println(_generateDerivedAttribute);
    TestCase.assertNotNull(rootStage);
    EClass _eClass = rootStage.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.STRUCTURED_ACTIVITY_NODE, _eClass);
    int _size = rootStage.substages.size();
    TestCase.assertEquals(1, _size);
    ActivityContext.Stage _get = rootStage.substages.get(0);
    EClass _eClass_1 = _get.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.READ_STRUCTURAL_FEATURE_ACTION, _eClass_1);
    ActivityContext.Stage _get_1 = rootStage.substages.get(0);
    StructuralFeature _structuralFeature = ((ReadStructuralFeatureAction) _get_1.rootAction).getStructuralFeature();
    String _name = _structuralFeature.getName();
    TestCase.assertEquals("description", _name);
    ActivityContext.Stage _head = IterableExtensions.<ActivityContext.Stage>head(rootStage.substages);
    int _size_1 = _head.substages.size();
    TestCase.assertEquals(1, _size_1);
    ActivityContext.Stage _head_1 = IterableExtensions.<ActivityContext.Stage>head(rootStage.substages);
    ActivityContext.Stage _get_2 = _head_1.substages.get(0);
    EClass _eClass_2 = _get_2.rootAction.eClass();
    TestCase.assertEquals(UMLPackage.Literals.READ_STRUCTURAL_FEATURE_ACTION, _eClass_2);
    ActivityContext.Stage _head_2 = IterableExtensions.<ActivityContext.Stage>head(rootStage.substages);
    ActivityContext.Stage _get_3 = _head_2.substages.get(0);
    StructuralFeature _structuralFeature_1 = ((ReadStructuralFeatureAction) _get_3.rootAction).getStructuralFeature();
    String _name_1 = _structuralFeature_1.getName();
    TestCase.assertEquals("customer", _name_1);
  }
}
