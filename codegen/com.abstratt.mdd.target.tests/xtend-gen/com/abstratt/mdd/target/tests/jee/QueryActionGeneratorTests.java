package com.abstratt.mdd.target.tests.jee;

import com.abstratt.mdd.core.IRepository;
import com.abstratt.mdd.core.tests.harness.AssertHelper;
import com.abstratt.mdd.core.util.ActivityUtils;
import com.abstratt.mdd.target.jee.QueryActionGenerator;
import com.abstratt.mdd.target.tests.AbstractGeneratorTest;
import java.io.IOException;
import java.util.List;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.uml2.uml.Action;
import org.eclipse.uml2.uml.Activity;
import org.eclipse.uml2.uml.Operation;
import org.eclipse.uml2.uml.StructuredActivityNode;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class QueryActionGeneratorTests extends AbstractGeneratorTest {
  public QueryActionGeneratorTests(final String name) {
    super(name);
  }
  
  public void testExtent() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model crm;");
    _builder.newLine();
    _builder.append("class Customer");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute name : String;  ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("query findAll() : Customer[*];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Customer extent;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Operation op = this.getOperation("crm::Customer::findAll");
    final Action root = this.getStatementSourceAction(op);
    IRepository _repository = this.getRepository();
    QueryActionGenerator _queryActionGenerator = new QueryActionGenerator(_repository);
    final CharSequence generated = _queryActionGenerator.generateAction(root);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("cq.select(customer_).distinct(true)");
    _builder_1.newLine();
    String _string = generated.toString();
    AssertHelper.assertStringsEqual(_builder_1.toString(), _string);
  }
  
  public void testSelectByBooleanValue() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model crm;");
    _builder.newLine();
    _builder.append("class Customer");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute name : String;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute vip : Boolean;              ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("query findVip() : Customer[*];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Customer extent.select((c : Customer) : Boolean {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("c.vip");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Operation op = this.getOperation("crm::Customer::findVip");
    final Action root = this.getStatementSourceAction(op);
    IRepository _repository = this.getRepository();
    QueryActionGenerator _queryActionGenerator = new QueryActionGenerator(_repository);
    final CharSequence generated = _queryActionGenerator.generateAction(root);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("cq.select(customer_)");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append(".distinct(true)");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append(".where(cb.isTrue(customer_.get(\"vip\")))");
    _builder_1.newLine();
    String _string = generated.toString();
    AssertHelper.assertStringsEqual(_builder_1.toString(), _string);
  }
  
  public void testSelectByAttributeInRelatedEntity() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model crm;");
    _builder.newLine();
    _builder.append("class Company");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute revenue : Double;");
    _builder.newLine();
    _builder.append("end;");
    _builder.newLine();
    _builder.append("class Customer");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute name : String;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute company : Company;              ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("query findByCompanyRevenue(threshold : Double) : Customer[*];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Customer extent.select((c : Customer) : Boolean {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("c.company.revenue >= threshold");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Operation op = this.getOperation("crm::Customer::findByCompanyRevenue");
    final Action root = this.getStatementSourceAction(op);
    IRepository _repository = this.getRepository();
    QueryActionGenerator _queryActionGenerator = new QueryActionGenerator(_repository);
    final CharSequence generated = _queryActionGenerator.generateAction(root);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("cq.select(customer_)");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append(".distinct(true)");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append(".where(cb.greaterThanOrEqualTo(");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("cb.parameter(Double.class,\"threshold\"),");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("company_.get(\"revenue\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("))");
    _builder_1.newLine();
    String _string = generated.toString();
    AssertHelper.assertStringsEqual(_builder_1.toString(), _string);
  }
  
  public void testSelectByRelatedEntity() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model crm;");
    _builder.newLine();
    _builder.append("class Company");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute revenue : Double;");
    _builder.newLine();
    _builder.append("end;");
    _builder.newLine();
    _builder.append("class Customer");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute name : String;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute company : Company;              ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("query findByCompany(toMatch : Company) : Customer[*];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Customer extent.select((c : Customer) : Boolean {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("c.company == toMatch");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Operation op = this.getOperation("crm::Customer::findByCompany");
    final Action root = this.getStatementSourceAction(op);
    IRepository _repository = this.getRepository();
    QueryActionGenerator _queryActionGenerator = new QueryActionGenerator(_repository);
    final CharSequence generated = _queryActionGenerator.generateAction(root);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("cq.select(customer_)");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append(".distinct(true)");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append(".where(cb.equal(");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("customer_.get(\"company\"),");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("cb.parameter(Company.class,\"toMatch\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("))");
    _builder_1.newLine();
    String _string = generated.toString();
    AssertHelper.assertStringsEqual(_builder_1.toString(), _string);
  }
  
  public void testSelectByDoubleComparison() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model crm;");
    _builder.newLine();
    _builder.append("class Customer");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute name : String;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute vip : Boolean;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute salary : Double;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("query findHighestGrossing(threshold : Double) : Customer[*];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Customer extent.select((c : Customer) : Boolean {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("c.salary >= threshold");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Operation op = this.getOperation("crm::Customer::findHighestGrossing");
    final Action root = this.getStatementSourceAction(op);
    IRepository _repository = this.getRepository();
    QueryActionGenerator _queryActionGenerator = new QueryActionGenerator(_repository);
    final CharSequence generated = _queryActionGenerator.generateAction(root);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("cq.select(customer_)");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append(".distinct(true)");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append(".where(cb.greaterThanOrEqualTo(");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("cb.parameter(Double.class,\"threshold\"),");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("customer_.get(\"salary\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("))");
    _builder_1.newLine();
    String _string = generated.toString();
    AssertHelper.assertStringsEqual(_builder_1.toString(), _string);
  }
  
  public void testGroupByAttribute() throws CoreException, IOException {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model crm;");
    _builder.newLine();
    _builder.append("enumeration Title");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Mr;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Mrs;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Ms;");
    _builder.newLine();
    _builder.append("end;");
    _builder.newLine();
    _builder.append("class Customer");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute name : String;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("attribute title : Title;              ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("query countByTitle() : {title : Title, customerCount : Integer} [*];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("begin");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Customer extent.groupBy((c : Customer) : Title {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("c.title");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}).groupCollect((group : Customer[*]) : {title:Title, customerCount : Integer} {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{ ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("title := group.one().title,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("customerCount := group.size()");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}   ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end;");
    _builder.newLine();
    _builder.append("end.");
    _builder.newLine();
    String source = _builder.toString();
    this.parseAndCheck(source);
    final Operation op = this.getOperation("crm::Customer::countByTitle");
    final Action root = this.getStatementSourceAction(op);
    IRepository _repository = this.getRepository();
    QueryActionGenerator _queryActionGenerator = new QueryActionGenerator(_repository);
    final CharSequence generated = _queryActionGenerator.generateAction(root);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("cq");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append(".groupBy(customer_.get(\"title\"))");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append(".multiselect(customer_.get(\"title\"), cb.count(customer_))");
    _builder_1.newLine();
    String _string = generated.toString();
    AssertHelper.assertStringsEqual(_builder_1.toString(), _string);
  }
  
  public Action getStatementSourceAction(final Operation op) {
    Activity _activity = ActivityUtils.getActivity(op);
    StructuredActivityNode _rootAction = ActivityUtils.getRootAction(_activity);
    List<Action> _findStatements = ActivityUtils.findStatements(_rootAction);
    Action _last = IterableExtensions.<Action>last(_findStatements);
    return ActivityUtils.getSourceAction(_last);
  }
}
