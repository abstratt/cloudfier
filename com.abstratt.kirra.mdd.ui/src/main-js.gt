def generate(org.eclipse.uml2.uml.Package single) {
    return generateAll([single]).join("\n")
}

def generateAll(List<org.eclipse.uml2.uml.Package> namespaces) {
"""

var cloudfier = {
    // first package is the main application
    applicationName: '${modelToScreen(getLabel(namespaces[0]))}', 
    qooxdooBase: '../../../qooxdoo/framework/source/',
    qooxdooTheme: 'Oxygen/16',
    apiBase: location.href.replace('/ui/', '/api/').replace('root/source/', '').replace(/\\?.*/, ''),
    ui : {},
    corelib: ${buildCoreLib()},
    registry: ${buildRegistry(namespaces)},
    linking: { 
        targetEntity: undefined, sourceInstanceUri: undefined, sourceEntity: undefined, sourceRelationship: undefined,
        isActiveFor: function (entityName) {
            return this.targetEntity === entityName;
        },
        link: function (targetURI, successCallback) {
            this.linker(targetURI, successCallback);
        },
        linkSuccess: function (component) {
            cloudfier.lib.reportFeedback(component, "Linked " + this.sourceEntity + " and " + this.targetEntity + " via " + this.sourceRelationship, true);
        },
        linkFailure: function (req) {
            cloudfier.lib.handleError(req);
        },
        linker: undefined 
    },
    lib : {
        tasker : ${buildTasker()},
    
        performAction: function (actionUri, model) {
	        var req = ${buildRequest('actionUri', 'model', '"POST"')};
	        req.addListener("success", function(e) {
	            if (qx.util.Request.isSuccessful(req.getStatus())) {
	                // update the grid
	                ${current()}.store.reload();
	                // update the focus entity and relationships
	                ${current()}.reloadRootObject();
	            }
	        }, this);
	        req.addListener("statusError", function(e) {
	            if (req.getStatus() == 404) {
	                // object being acted on not found, or it caused the object to be deleted
	                // update the grid
	                ${current()}.store.reload();
	                // update the focus entity and relationships
	                ${current()}.reloadRootObject();
	            } else {
	                cloudfier.lib.handleError(req);
	            }            
	        }, this);
	        req.send();
	    },
	    
	    reloadRelationships : function (parentRecordUri) {
	        var related = ${current()}.relatedStores;
	        if (related.length == 0) {
	            return;
	        }
		    // reload each relationship sequentially to avoid overloading the server with parallel requests
		    for (var current = 0;current < related.length; current++) {
		        cloudfier.lib.tasker.schedule({
		            relatedStore: related[current].store,
		            context: parentRecordUri,
		            uri: parentRecordUri + '/relationships/' + related[current].relationship + '/',
		            run: function (next) {
			    	    if (parentRecordUri) { 
					        console.log("Reloading " + this.uri);
					        this.relatedStore.setUrl(this.uri);
					        this.relatedStore.addListenerOnce("loaded", next);
					        this.relatedStore.addListenerOnce("error", function (e) {
						        alert("Error: " + e.data.getStatus() + " - " + e.data);
						        console.log(e);
						        next();
					        });
					        this.relatedStore.reload();
					    } else {
					        this.relatedStore.resetUrl();
					        this.relatedStore.resetModel();
					        next();
					    }                
		            }
		        });
		    }
	    },
        createBanner: function (message) {
            var banner = new qx.ui.basic.Label(message);
            banner.setFont(cloudfier.bannerFont);
            banner.setMarginTop(30);
            banner.setMarginBottom(30);
	        return banner;
        },
        
        createProgressIndicator: function (small) {
            var progressIndicator = new qx.ui.container.Composite(new qx.ui.layout.HBox(0, "center"));
	        progressIndicator.setBackgroundColor("white");
	        var loadImage = new qx.ui.basic.Image(cloudfier.qooxdooBase + "resource/qx/progress/loading" + (small ? 22 : 66) + ".gif");
	        loadImage.setAlignX("center");
	        loadImage.setAlignY("middle");
	        progressIndicator.add(loadImage);
	        return progressIndicator;
        },
        buildFormMessage: function (form) {
            var message = '';
            var groups = form.getGroups();            
            var group, g, groups;
            var items, item, i;
            var label;
            
            for (g in groups) {
                group = groups[g];
                items = group.items;
                for (i in items) {                    
                    item = items[i];
                    if (!item.getValid()) {
                        label = group.labels[i];
                        message += (label + ": " + item.getInvalidMessage());
                        message += "<br>";
                    }
                }
            }
            if (form.getValidationManager().getInvalidMessage()) {
                message += form.getValidationManager().getInvalidMessage();
            }
            return message;        
        },
        
        addStandardWindowListeners : function (window, okButton, supportCancel) {
          var stdKeyListener = function (keyEvent) { 
              var key = keyEvent.getKeyIdentifier();
              var focused = qx.ui.core.FocusHandler.getInstance().getFocusedWidget(); 
              if (key === "Enter") {
                  focused.addListenerOnce("blur", function () {
                      okButton.execute(); 
                    });
                    focused.blur();
              } else if (supportCancel && key === "Escape") { 
                  window.close();
              } 
          };
          window.addListener("keypress", stdKeyListener);   
        },
        handleError : function (req) {
            var message = req.getStatus() != 500 ? req._getParsedResponse().message : "Server error" ;
            alert("Error: " + req.getStatus() + " - " + message);
/*        
            // qooxdoo won't load response in case of error
            var response = req._getParsedResponse();
            if (response) {
                var error = qx.util.Serializer.toNativeObject(response, (function() {}));
                if (error) {
                    alert(error.message);
                }
            }
*/            
        },
        focusOnFirst : function (children) {
            for (i in children) {
                if (children[i].getFocusable() && children[i].getTabIndex() == 1) {
                    children[i].focus();
                    break;
                }
            }
        },
        buildFormRenderer : function(form) {
            var formRenderer = new qx.ui.form.renderer.Double(form);
        
            formRenderer.setPadding(5, 5, 5, 5);
            formRenderer.getLayout().setSpacingY(10);
            formRenderer.getLayout().setColumnAlign(0, "right", "top");
            formRenderer.getLayout().setColumnAlign(2, "right", "top");
            formRenderer.getLayout().setColumnWidth(0, 115);
            formRenderer.getLayout().setColumnWidth(1, 280);
            formRenderer.getLayout().setColumnWidth(2, 115);
            formRenderer.getLayout().setColumnWidth(3, 280);
            return formRenderer;    
        },
        showSignupWindow : function() {
               var layout = new qx.ui.layout.VBox(10, "middle");
            
            var signupWindow = new qx.ui.window.Window("Sign up to " + cloudfier.applicationName);
            signupWindow.setShowMaximize(false);
            signupWindow.setShowMinimize(false);
            signupWindow.setShowClose(false);
            signupWindow.setAlwaysOnTop(true);
            signupWindow.setModal(true);
            signupWindow.setLayout(layout);
            
            var signupForm = new qx.ui.form.Form();
            var userTextField = new qx.ui.form.TextField();
            userTextField.setRequired(true);
            signupForm.add(userTextField, "Email", qx.util.Validate.email(), "username");
            
            var password1TextField = new qx.ui.form.PasswordField();
            password1TextField.setRequired(true);
            signupForm.add(password1TextField, "Password", null, "password1");
            
            var password2TextField = new qx.ui.form.PasswordField();
            password2TextField.setRequired(true);
            signupForm.add(password2TextField, "Password (again)", null, "password2");
    
            var signupFormRenderer = new qx.ui.form.renderer.Single(signupForm);
            signupFormRenderer.getLayout().setColumnMinWidth(1, 180);
            
            var errorAreaLabel = new qx.ui.basic.Label();
            errorAreaLabel.set({rich: true, textAlign: "center"});
            var reportError = function (message) {
                errorAreaLabel.setTextColor("red");
                errorAreaLabel.setToolTipText(message);
                errorAreaLabel.setValue(message);
            };
            var reportInfo = function (message) {
                errorAreaLabel.setTextColor("black");
                errorAreaLabel.setToolTipText(message);
                errorAreaLabel.setValue(message);
            };
                               
            var signupController = new qx.data.controller.Form(null, signupForm);
            
            var signupModel = signupController.createModel();
            
            var signupBtn = new qx.ui.form.Button("Sign up");
            var cancelBtn = new qx.ui.form.Button("Cancel");
               
            var signupBtnCtr = new qx.ui.container.Composite();
               
            signupBtnCtr.setLayout(new qx.ui.layout.HBox(20, "center"));
            signupBtnCtr.add(signupBtn);
            signupBtnCtr.add(cancelBtn);
            new qx.data.Array([signupFormRenderer, signupBtnCtr, errorAreaLabel]).forEach(function (it) {
                it.set({ alignX: "center"});
                signupWindow.add(it, {});
            });
            
            cancelBtn.addListener("execute", function (e) { 
                signupWindow.close();
                this.showLoginWindow(); 
            }, this);
            signupBtn.addListener("execute", function(e) {
                userTextField.resetInvalidMessage();
                password1TextField.resetInvalidMessage();
                password2TextField.resetInvalidMessage();
                signupForm.validate();
                   if (!userTextField.isValid() || !password1TextField.isValid() || !password2TextField.isValid()) {
                    reportError(cloudfier.lib.buildFormMessage(signupForm));
                    return;
                }
                if (signupModel.getPassword1() !== signupModel.getPassword2()) {
                    password1TextField.setValid(false);
                    reportError("Passwords don't match");
                    return;
                }
                var password = signupModel.getPassword1();
                if (password.length < 8 || password.length > 20) {
                    password1TextField.setValid(false);   
                    reportError("Password must be 8-20 chars long and <br>mix digits, upper and lower case letters");
                    return;
                }
                
                var passwordCheck = new RegExp('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).*\$');  
                if (!password.match(passwordCheck)) {
                    password1TextField.setValid(false);   
                    reportError("Password must be 8-20 chars long and <br>mix digits, upper and lower case letters");
                    return;
                }
            
                var req = new qx.io.request.Xhr(cloudfier.apiBase + "signup", "POST");
                req.setRequestData("login="+signupModel.getUsername()+"&password="+password);
                req.addListener("success", function(e) {
                    var newLocation = window.location; 
                    if (window.location.search) {
                        var params = window.location.search.slice(1).split("&");
                        for (var i = 0; i < params.length; i++)
                        {
                            var tmp = params[i].split("=");
                            if (tmp[0] === 'source' && tmp.length == 2 && tmp[1]) {
                                newLocation = unescape(tmp[1]);
                                break;
                            }
                        }
                    }
                    window.location = newLocation;
                });
                req.addListener("statusError", function(e) {
                    signupBtn.setLabel("Sign up");
                    signupWindow.setEnabled(true);
                    reportError("User with the given email already exists");
                }, this);
                reportInfo("");
                signupBtn.setLabel("Signing up...");
                signupWindow.setEnabled(false);
                req.send();
            }, this);
            
            var errorCleaner = function(e) {
    	        userTextField.resetValid();
                password1TextField.resetValid();
                password2TextField.resetValid();
    	        reportInfo("");
            };
            userTextField.addListener("input", errorCleaner);
            password1TextField.addListener("input", errorCleaner);
            password2TextField.addListener("input", errorCleaner);
        
            signupWindow.setWidth(350);
            signupWindow.center();
            signupWindow.open();
            userTextField.focus();
            cloudfier.lib.addStandardWindowListeners(signupWindow, signupBtn, false); 
            
        },    
        
        showLoginWindow : function() {
            var layout = new qx.ui.layout.VBox(10, "middle");
            
            var loginWindow = new qx.ui.window.Window("Login to " + cloudfier.applicationName);
            loginWindow.setShowMaximize(false);
            loginWindow.setShowMinimize(false);
            loginWindow.setShowClose(false);
            loginWindow.setAlwaysOnTop(true);
            loginWindow.setModal(true);
            loginWindow.setLayout(layout);
            
            var loginForm = new qx.ui.form.Form();
            
            var userTextField = new qx.ui.form.TextField();
            userTextField.setRequired(true);
            loginForm.add(userTextField, "User", qx.util.Validate.email(), "username");
            
            var passwordTextField = new qx.ui.form.PasswordField();
            passwordTextField.setRequired(true);
            loginForm.add(passwordTextField, "Password", null, "password");
            
            var loginController = new qx.data.controller.Form(null, loginForm);
            var loginModel = loginController.createModel();
            
            var loginFormRenderer = new qx.ui.form.renderer.Single(loginForm);
            loginFormRenderer.getLayout().setColumnMinWidth(1, 180);
            
            var loginLinksCtr = new qx.ui.container.Composite();
            loginLinksCtr.setLayout(new qx.ui.layout.HBox(20, "center"));
            
            var signUpLink = new qx.ui.form.Button("Sign up");
            signUpLink.setToolTipText("Create user credentials for signing in to this and any other Cloudfier applications.");
            signUpLink.setAppearance("menubar-button");
            loginLinksCtr.add(signUpLink);
            signUpLink.addListener("execute", function(e) {
                loginWindow.close();
                this.showSignupWindow();
            }, this);
            
            var errorAreaLabel = new qx.ui.basic.Label();
            errorAreaLabel.set({rich: true, textAlign: "center"});            
            var reportError = function (message) {
                errorAreaLabel.setTextColor("red");
                errorAreaLabel.setValue(message);
                errorAreaLabel.setToolTipText(message);
            };
            var reportInfo = function (message) {
                errorAreaLabel.setTextColor("black");
                errorAreaLabel.setValue(message);
                errorAreaLabel.setToolTipText(message);
            };
            
            var guestLink = new qx.ui.form.Button("Sign in as guest");
            guestLink.setToolTipText("Sign in without credentials if the application allows guest sessions. <p>In guest sessions, functionality may be limited.</p>");
            guestLink.setAppearance("menubar-button");
            loginLinksCtr.add(guestLink);
            guestLink.addListener("execute", function(e) {
                cloudfier.corelib.login("guest", "", function (e) {
                    if (e.getTarget().getStatus() == 401) {
                        guestLink.setEnabled(false);
                        reportError("Application does not support guest sessions");    
                    }
                });
            });
            
            
            var resetLink = new qx.ui.form.Button("Reset password");
            resetLink.setAppearance("menubar-button");
            loginLinksCtr.add(resetLink);
            resetLink.addListener("execute", function(e) {
                userTextField.resetValid();
                passwordTextField.resetValid();
                try {
                    qx.util.Validate.checkEmail(userTextField.getValue(), userTextField);
                    console.log("Email valid, request password reset here");
                    
	                var req = new qx.io.request.Xhr(cloudfier.apiBase + "passwordReset", "POST");
	                req.setRequestData("login="+loginModel.getUsername());
	                req.send();
	                req.addListener("success", function(e) {
	                    reportInfo("Password reset email sent to " + loginModel.getUsername());
	                });
	                req.addListener("statusError", function(e) {
	                    reportError("User " +  loginModel.getUsername() + " not found");
	                }, this);
                } catch (e) {
                    if (e instanceof qx.core.ValidationError) {
                        var invalidMessage = e.message;
                        userTextField.setInvalidMessage(invalidMessage);
                        userTextField.setValid(false);
                        reportError(invalidMessage);
                    } else {
                      throw e;
                    }
                }
            });
            
            var loginBtn = new qx.ui.form.Button("Sign in");
            var loginBtnCtr = new qx.ui.container.Composite();
            loginBtnCtr.setLayout(new qx.ui.layout.HBox(20, "center"));
            loginBtnCtr.add(loginBtn);
            
            loginBtn.addListener("execute", function(e) {
                loginForm.validate();
                if (!userTextField.isValid() || !passwordTextField.isValid()) {
                    reportError(cloudfier.lib.buildFormMessage(loginForm));
                    return;
                }
                reportInfo("");
                loginBtn.setLabel("Signing in...");
                loginWindow.setEnabled(false);
                cloudfier.corelib.login(loginModel.getUsername(), loginModel.getPassword(), function () {
                    loginBtn.setLabel("Sign in");
                    loginWindow.setEnabled(true);
                    reportError("Invalid user or password"); 
                });
            }, this);

            var errorCleaner = function(e) {
                userTextField.resetValid();
                passwordTextField.resetValid();
                reportInfo("");
            };
            userTextField.addListener("input", errorCleaner);
            passwordTextField.addListener("input", errorCleaner);
            
            new qx.data.Array([loginFormRenderer, loginBtnCtr, loginLinksCtr, errorAreaLabel]).forEach(function (it) {
                it.set({ alignX: "center" });
                loginWindow.add(it, {});
            });
            
            loginWindow.setWidth(300);
            loginWindow.center();
            loginWindow.open();
            userTextField.focus();
            cloudfier.lib.addStandardWindowListeners(loginWindow, loginBtn, false); 
        },
        reportFeedback: function (anchor, message, temporary) {
            var canvas = new qx.ui.layout.Canvas()
            var popup = new qx.ui.popup.Popup(canvas).set({
                padding: [10, 5]
              });
        
            var atom = new qx.ui.basic.Atom(message);
            popup.add(atom);
            popup.placeToWidget(anchor);

            qx.event.Timer.once(function () { popup.fadeOut(1000); }, null, 2000); 
            popup.show();
        }
    }
};


/*
Only need to include here dependencies that do not appear clearly in this template. 

#require(qx.io.ScriptLoader)
#require(qx.ui.form.TextArea)
#require(qx.ui.form.TextField)
#require(qx.ui.form.Spinner)
#require(qx.ui.form.CheckBox)
#require(qx.ui.form.DateField)
*/
qx.Class.define("app1.Application", {
  extend : qx.application.Inline,
  events: {
     "currentUserChanged" : "qx.event.type.Data"
  },
  
  members : {
    main : function() {
        document.body.innerHTML = "";
        this.base(arguments);
        ${ getEntities(namespaces) ? "this.validApplication();" : "this.emptyApplication();" }
    }, 
    emptyApplication : function () {
        alert("No entities defined in this application.");
        this.validApplication();
    },
        
    validApplication : function() {
        if (qx.core.Environment.get("qx.debug")) {
            qx.log.appender.Native;
            qx.log.appender.Console;
        }

        cloudfier.application = this;
        
        cloudfier.qooxdooISODateFormat = new qx.util.format.DateFormat("yyyy/MM/dd");
        
        var defaultFont = qx.theme.manager.Font.getInstance().resolve("bold");
        cloudfier.bannerFont = defaultFont.clone();
        cloudfier.bannerFont.setSize(defaultFont.getSize() + 4);                                                                                                                                                                                                         

        ${ defineJsonStore() }       
        
        document.title = cloudfier.applicationName;
        
        var req = new qx.io.request.Xhr(cloudfier.apiBase, "GET");
     
     console.log(cloudfier.apiBase);
        var listener;
        listener = function(e) {
            if (e.getTarget().getStatus() == 401) {
                cloudfier.lib.showLoginWindow();
             } else {
                 cloudfier.lib.handleError(e.getTarget());
            }
        };
        req.addListener("statusError", listener, this);
        req.addListener("success", function() { this.buildUI() }, this);
        req.send();
     
    },
    
    buildUI : function() {
        var root = this.getRoot();
        var tabView = new qx.ui.tabview.TabView();
        
        tabView.setBarPosition('left');
        
        root.add(tabView, {left:20, top:30});
        
        var loginLabel = new qx.ui.basic.Label("Logged in as: ");
        loginLabel.setAlignY("middle");
        var loginUser = new qx.ui.basic.Label("<anonymous>");
        loginUser.setAlignY("middle");
        var logoutBtn = new qx.ui.form.Button("Log out");
        cloudfier.ui.profileBtn = new qx.ui.form.Button("Create profile");
        cloudfier.ui.profileBtn.setToolTipText("Create a new user in the system for the logged in credentials");
        cloudfier.ui.profileBtn.setEnabled(false);
        var loginCtr = new qx.ui.container.Composite();
        loginCtr.setLayout(new qx.ui.layout.HBox(5, "right"));
        loginCtr.add(loginLabel);
        loginCtr.add(loginUser);
        loginCtr.add(logoutBtn);
        loginCtr.add(cloudfier.ui.profileBtn);
        root.add(loginCtr, {left:500, top:0});
        
        this.addListener("currentUserChanged", function () {
            var currentUser = cloudfier.currentUser;
	        console.log("Current user changed");
            if (!currentUser || !currentUser.username || "guest" == currentUser.username) {
                loginUser.setValue("guest");
                cloudfier.ui.profileBtn.setVisibility("excluded");
            } else if (!currentUser.profile) {
                loginUser.setValue(currentUser.username + " (unregistered)");
                cloudfier.ui.profileBtn.setVisibility("${ getUserEntities(namespaces) ? 'visible' : 'excluded' }");
            } else {
                loginUser.setValue(currentUser.username + " (" + currentUser.profile.shorthand + ")");
                cloudfier.ui.profileBtn.setVisibility("excluded");
            }
        });
        
        
        logoutBtn.addListener("execute", function () {
            cloudfier.corelib.logout();
        });
        
        ${ createStores(namespaces) }

        ${
            // create the entity tabs
            getEntities(namespaces).findAll { 
                isTopLevelEntity(it)
            }.collect { 
                entityTab(it, modelToScreen(getLabel(it)), "${getSymbol(it)}Store")
            }.join('\n')            
        }
        cloudfier.corelib.refreshCurrentUser();
    }
  }
});        

"""         
}

def entityTab(entity, title, store, tabView = 'tabView', master = true) {
"""
// basic tab creation for ${getName(entity)}
(function (tabView, store) {
    var layout = new qx.ui.layout.Grid();
    layout.setColumnWidth(0, 900);
    layout.setSpacingY(10);
    layout.setSpacingX(10);
    
    var page = new qx.ui.tabview.Page('$title');
    page.setLayout(layout);
    page.setPadding(10);
    tabView.add(page);

    page.addListenerOnce("appear", function () {
        var req = new qx.bom.request.Script();
        req.open("GET", 'module/${entity.qualifiedName}.js');
        req.send();
    });
    
    ${entityObject(entity)}.page = page;

    // Create the loading image
    page.add(cloudfier.lib.createProgressIndicator(), {row: 0, column: 0, colSpan: 1});

    page.addListener("appear", function () {
        ${current()} = ${entityObject(entity)};
        ${current()}.pageSelected();
    });
}) ($tabView, $store);
"""
}