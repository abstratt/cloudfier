def generate(Object umlClass) {
"""
            ${ classTab(umlClass) }            
"""
}

def addTableModel(entity) {
"""
qx.Class.define("cloudfier.table.${getSymbol(entity)}TableModel",
{
  extend : qx.ui.table.model.Abstract,
  
  construct : function(store)
  {
    this.base(arguments);
    this.store = store;
    this.setColumns(
        [${tabledProperties(entity).collect { "'${modelToScreen(getLabel(it))}'" }.join(', ') }],
        [${tabledProperties(entity).collect { "'${getName(it)}'" }.join(', ') }]
    );
    store.addListener("loaded", function() {
        var data =
          {
            firstRow    : 0,
            lastRow     : store.getModel().getLength() - 1,
            firstColumn : 0,
            lastColumn  : this.getColumnCount() - 1
          };
     
        this.fireDataEvent("dataChanged", data); 
    }, this);
    store.addListener("error", function(e) {
        if (e.getData().getStatus() == 401) {
            cloudfier.lib.showLoginWindow();
        } else {
            cloudfier.lib.handleError(e.getTarget());
        }
    });
  },

  members :
  {
    store: null,
    
    columnInfo: [ 
        ${tabledProperties(entity).collect { 
            "{ columnId: '${getName(it)}', displayName: '${modelToScreen(getLabel(it))}', reference: ${isRelationship(it)} }" 
        }.join(', ') }
    ],
    
    getRowCount : function() {
      if (store.getState() === "completed")
          return store.getModel().getLength();
      return 0;
    },

    getRowData : function(rowIndex) {
      if (store.getState() === "completed") {
          return store.getModel().getItem(rowIndex);
      }
      return null;
    },
    
    getValue : function(columnIndex, rowIndex) {
        if (store.getState() !== "completed")
            return null;
        var item = store.getModel().getItem(rowIndex);
        var itemValues = item.getValues();
        var baseValue = item.getValues().get(this.columnInfo[columnIndex].columnId);
        return baseValue;
    }
  }
});

var tableModel = new cloudfier.table.${getSymbol(entity)}TableModel(store);
"""
}

def classTab(entity) {
"""
(function () {

    var layout = new qx.ui.layout.Grid();
    layout.setColumnWidth(0, 900);
    layout.setSpacingY(10);
    layout.setSpacingX(10);

    var store = ${entityObject(entity)}.store    
    var page = ${entityObject(entity)}.page

    // remove any placeholders    
    page.removeAll();
    
    var profileBtnUpdater = function () {
        ${ isUser(entity) ? """
            cloudfier.ui.profileBtn.setEnabled(!(!cloudfier.currentUser || !cloudfier.currentUser.username || "guest" == cloudfier.currentUser.username));
        """ : """
            cloudfier.ui.profileBtn.setEnabled(false);
        """
        }
    }
    
    cloudfier.application.addListener("currentUserChanged", profileBtnUpdater);
    page.addListener("appear", profileBtnUpdater);
    profileBtnUpdater();
    
    var row = 1;
    
    var form = new qx.ui.form.Form();
    var controller = new qx.data.controller.Form(null, form);
    
    var currentRecord = 0;
    
    ${ buildForm(null, 'form', getFormFields(entity), false, false) }
    
    store.bind("model[0].values", controller, "model");
    
    var resetForm = function(clearValues) {
        /*${ entity.ownedAttributes.findAll { !(isEntity(it.type) && it.multivalued) }.collect { resetField(it) }.join('\n') }*/
    };

    ${ addDataTable(entity) }
    
    var formDecorator = new qx.ui.decoration.Decorator();
    formDecorator.setWidth(1);
    formDecorator.setStyle("dashed");
    formDecorator.setColor("#999");
    
    var container = new qx.ui.container.Composite();
    container.setLayout(new qx.ui.layout.VBox());
    container.setPadding(10, 10, 10, 10);
    container.setDecorator(formDecorator);

    // navigation toolbar for ${getName(entity)}
    var navigationToolbar = new qx.ui.toolbar.ToolBar();
    container.add(navigationToolbar);

    ${ 
        !hasChildTabRelationship(entity) ? "" : """
        // allow hiding the master form to leave more room for  
        var detailsShowing = true; 
        var toggleDetailsButton = new qx.ui.toolbar.Button(null, cloudfier.qooxdooBase + "resource/qx/icon/" + cloudfier.qooxdooTheme + "/actions/zoom-fit-best.png");
        toggleDetailsButton.setToolTipText("Show/hide current record details");
        navigationToolbar.add(toggleDetailsButton);
        var toggleDetails = function () {
            detailsShowing = !detailsShowing;
            formRenderer.setVisibility(detailsShowing ? "visible": "excluded");
        };
        toggleDetailsButton.addListener("execute", toggleDetails);
    """ }
    
    // updates the UI so the proper record is shown in the form and as selected on the list and all 
    // state-dependent actions are enabled/disabled accordingly 
    var loadRecord = function (newPos, skipSelection) {
        var changed = newPos != currentRecord;
        //cloudfier.refreshCurrentUser();
        console.log("Loading record "+ newPos + " for " + ${current()}.name);
        var totalRecords = store.getModel().getLength() - 1;
        if (store.getModel().getItem(newPos)) {
            currentRecord = newPos;
        } else {
            currentRecord = Math.min(currentRecord, totalRecords);
        }
        if (currentRecord < 0) {
            resetForm(true);
            if (skipSelection === undefined) 
                ${current()}.table.getSelectionModel().resetSelection();
            enableButtons(); 
        } else {
            resetForm(false);
            store.bind("model[" + currentRecord + "].values", controller, "model");
            if (skipSelection === undefined) 
                ${current()}.table.getSelectionModel().setSelectionInterval(currentRecord, currentRecord);
            enableButtons(store.getModel().getItem(currentRecord));
        }
        store.fireDataEvent("recordSelected", store.getModel());
    };
    
    ${entityObject(entity)}.reloadRootObject = function (newPos, skipSelection) {
        var indexToLoad = (newPos === undefined) ? currentRecord : newPos; 
        var currentItem = store.getModel().getItem(indexToLoad);
        if (!currentItem)
            return;
        cloudfier.tasker.schedule({
            uri: currentItem.getUri(),
            context: currentItem.getUri(),
            run: function (next) {
                var req = new qx.io.request.Xhr(this.uri, "GET");
                req.addListener("success", function(e) {
                    try {
                        ${current()}.currentUri = this.uri;
			            var rawData = req.getResponse();
			            ${ recordConverter(entity, 'rawData', false, false) }
			            var reloaded = qx.data.marshal.Json.createModel(rawData);
			            store.getModel().setItem(currentRecord, reloaded);
			            loadRecord(indexToLoad, skipSelection);
			        } finally {
			            next();
			        }
     	        }, this);
     	        req.addListener("statusError", next);
     	        req.send();
            }
	    });    
    };    
    
    
    // CRUD toolbar for ${getName(entity)}
    ${ addCrudToolbar('navigationToolbar', entity, true, true) }
    
    // action toolbar for ${getName(entity)}
    ${ addActionToolbar(entity, 'navigationToolbar', getEntityActions(entity), true) }
    ${ addActionToolbar(entity, 'navigationToolbar', getInstanceActions(entity), true) }

    var formRenderer = cloudfier.lib.buildFormRenderer(form);
    
    container.add(formRenderer);
    
    page.add(container, {row: row++, column: 0});
    
    ${addMultiRelationships(entity, getRelationships(entity).findAll { isChildTabRelationship(it) })}

    
    if (store.getState() === "completed") {
        loadRecord(0);
    } else if (store.getState() === "configured") {
        ${entityObject(entity)}.reloadStore();
        store.addListenerOnce("loaded", function(e) {
            ${current()}.reloadRootObject();
        });
    }
    
    ${current()}.pageSelected = function () {
        // when the page is selected, we need to reload the root object and the grid
        ${current()}.reloadStore();
        ${current()}.reloadRootObject(currentRecord, true);
    };
    
    // reload relationships when a different parent record is selected
    store.addListener("recordSelected", function () {
        var parentRecord = store.getModel().getItem(currentRecord);
        cloudfier.lib.reloadRelationships(parentRecord.getUri());
    });
    
}) ();
"""
}

def buildFormWidget(formName, editable, creation, it) {
    isEntity(it.type) ? 
        (it.multivalued ? 
            multiFormLinkField(formName, it, editable, creation) :
            formLinkField(formName, it, editable, creation)
        ) 
    : 
        (it.multivalued ?
            multiFormField(formName, it, editable, creation) :
            formField(formName, it, editable, creation)
        )
}

def buildForm(recordVar, formName, dataElements, editable = true, creation = false) {
"""
    (function() {
	    var formRecord = ${recordVar};
	    ${
	        dataElements.collect {
	            buildFormWidget(formName, editable, creation, it) 
	        }.join("\n") 
	    }
	    
	    ${
	        def tabIndex = 1
	        dataElements.findAll { editable && isEditableFormField(it, creation) }.collect {   
	            "${getSymbol(it)}Widget.setTabIndex(${tabIndex++});"
	        }.join("\n") 
	    }
	    
	    ${
	        dataElements.collect { property ->
	           addWidgetToForm(formName, property)
	           
	        }.join('\n')
	    }
    })();
"""
}

def addWidgetToForm(formName, property) {
    """
    ${formName}.add(${getSymbol(property)}Widget, '${modelToScreen(getLabel(property))}', null, '${getName(property)}', null, ${getFormFieldOptions(property)});
    ${getSymbol(property)}Widget.setToolTipText('${getDescription(property).replace("'", "\\'") }');
    """
}

def addMultiRelationships(entity, relationships) {
    if (!relationships.any { it.navigable }) return ""
"""
// relationships for ${getName(entity)}
var ${getSymbol(entity)}RelationshipsTabView = new qx.ui.tabview.TabView();
${getSymbol(entity)}RelationshipsTabView.setBarPosition('top');

page.add(${getSymbol(entity)}RelationshipsTabView, {row: row++, column: 0});

${ relationships.findAll { it.navigable }.collect { addMultiRelationship(entity, it) }.join('\n') }
"""
}

def addMultiRelationship(entity, relationship) {
"""
// relationship ${getName(entity)} -> ${getName(relationship)}
var ${getSymbol(relationship)}Layout = new qx.ui.layout.Grid(3, 3);
${getSymbol(relationship)}Layout.setColumnWidth(0, 300);
${getSymbol(relationship)}Layout.setColumnWidth(1, 300);
${getSymbol(relationship)}Layout.setColumnWidth(2, 300);

var ${getSymbol(relationship)}StoreDataManipulator = ${createDataManipulator(relationship.type)};    

var ${getSymbol(relationship)}Store = new cloudfier.store.JsonStore(null, { manipulateData: ${getSymbol(relationship)}StoreDataManipulator });
${getSymbol(relationship)}Store.addListener("error", function(e) {
    if (e.getData().getStatus() == 401) {
        cloudfier.lib.showLoginWindow();
    }
});

${entityObject(entity)}.relatedStores.push({
    relationship: '${getSymbol(relationship)}',
    store: ${getSymbol(relationship)}Store
});

${childTab(relationship, relationship.type, modelToScreen(relationship.name), "${getSymbol(relationship)}Store", "${getSymbol(entity)}RelationshipsTabView")}

${isReadOnly(relationship) ? "" : (isLinkRelationship(relationship) ? linkToRelationship(entity, relationship) : addToRelationship(relationship))}
"""
}

def linkToRelationship(entity, relationship) {
"""
var ${getSymbol(relationship)}LinkButton = new qx.ui.toolbar.Button('Link to ${modelToScreen(getLabel(relationship))}');

${getSymbol(relationship)}LinkButton.setToolTipText('Link to an existing ${modelToScreen(getLabel(relationship.type))} via ${modelToScreen(getLabel(relationship))}');
navigationToolbar.add(${getSymbol(relationship)}LinkButton);
${getSymbol(relationship)}LinkButton.addListener("execute", function () {
    
    cloudfier.linking.sourceInstanceUri = 
    cloudfier.linking.sourceEntity = "${modelToScreen(getLabel(entity))}";
    cloudfier.linking.targetEntity = "${modelToScreen(getLabel(relationship.type))}";
    cloudfier.linking.sourceRelationship = "${modelToScreen(getLabel(relationship))}";
    cloudfier.linking.linker = function(relatedURI, successCallback) {
        var parentRecord = store.getModel().getItem(currentRecord);
        var relationshipUri = parentRecord.getUri() + '/relationships/${getSymbol(relationship)}/';
        
        var related = { uri: relatedURI };
        
        var req = ${buildRequest('relationshipUri', 'related', '"POST"')};
        req.addListener("loadEnd", function(e) {
            if (qx.util.Request.isSuccessful(req.getStatus())) {
                successCallback();
                this.linkSuccess(${getSymbol(relationship)}LinkButton);
            } else {
                if (req.getStatus() == 404) {
                    // object being acted on not found
                    // update the grid
                    ${current()}.store.reload();
                    // update the focus entity and relationships
                    ${current()}.reloadRootObject();
                } else {
                    this.linkFailure(req);
                }            
            }
        }, this);
        req.send();
        
        
        
    };
    cloudfier.lib.reportFeedback(${getSymbol(relationship)}LinkButton, "Now select a record of type ${modelToScreen(getLabel(relationship.type))} to link to this ${modelToScreen(getLabel(entity))} via ${modelToScreen(getLabel(relationship))}", true); 
});
"""
}

def addToRelationship(relationship) {
"""

var ${getSymbol(relationship)}Save = ${ buildSaveFunction(relationship.type, "${getSymbol(relationship)}Store.getUrl()") }

var ${getSymbol(relationship)}AddButton = new qx.ui.toolbar.Button('Add to ${modelToScreen(getLabel(relationship))}');


${getSymbol(relationship)}AddButton.setToolTipText('Add to ${modelToScreen(getLabel(relationship))}');
navigationToolbar.add(${getSymbol(relationship)}AddButton);
${getSymbol(relationship)}AddButton.addListener("execute", ${ addButtonListener(relationship.type, "${getSymbol(relationship)}Save", { !isReadOnly(it, true) && it != relationship.otherEnd }) });
"""
}

def childTab(relationship, entity, title, store, tabView = 'tabView') {
"""
(function (tabView, store) {
    var children = [];
     
    var page = new qx.ui.tabview.Page('$title');
    page.setLayout(new qx.ui.layout.VBox());
    page.setPadding(10);
    tabView.add(page);
    
    page.getChildControl("button").setToolTipText('${getDescription(relationship).replace("'", "\\'")}'); 
    
    // all child records are children of the childComposite    
    var childComposite = new qx.ui.container.Composite();
    var childCompositeLayout = new qx.ui.layout.Grid();
    childCompositeLayout.setColumnWidth(0, 800);
    childCompositeLayout.setColumnAlign(0, "center", "middle");
    childCompositeLayout.setSpacingY(20);
    childComposite.setLayout(childCompositeLayout);
    childComposite.add(cloudfier.lib.createBanner("Select a master record to see children information here"), {row: 0, column: 0, colSpan: 1});
    page.add(childComposite);
    
    store.addListener("loaded", function(e) {
        children.forEach(function (toDelete)  {
            store.removeBinding(toDelete.bindingId);
            toDelete.widget.destroy();
            toDelete.controller.dispose();
            toDelete.form.dispose();
        });
        children = [];
        
        childComposite.getChildren().forEach(function (toDelete)  {
            toDelete.destroy();
        });

        var forms = [];
        var formDecorator = new qx.ui.decoration.Decorator();
        formDecorator.setWidth(1);
        formDecorator.setStyle("dashed");
        formDecorator.setColor("#999");
        
        var itemCount = store.getModel().getLength(),
            i,
            form,
            formController,
            bindingId,
            row = 0;
            
        if (itemCount === 0) {
            childComposite.add(cloudfier.lib.createBanner("There are no ${modelToScreen(getLabel(relationship))}"), {row: 0, column: 0, colSpan: 1});
            return;
        }     
        for (i = 0; i < itemCount; i++) {
            var container = new qx.ui.container.Composite();
            var layout = new qx.ui.layout.Grid();
            layout.setColumnWidth(0, 800);
         
            container.setLayout(layout);

            container.setPadding(10, 10, 10, 10);
            container.getLayout().setSpacingX(20);
            container.getLayout().setSpacingY(10);
            container.setDecorator(formDecorator);

            // navigation toolbar for ${getName(entity)}
            var navigationToolbar = new qx.ui.toolbar.ToolBar();
            container.add(navigationToolbar, {row: 0, column:0, colSpan: 1});

            (function(currentRecord) {
                // CRUD toolbar for ${getName(relationship)}
                ${ addCrudToolbar('navigationToolbar', entity, !isReadOnly(relationship), false, isDetachableRelationship(relationship)) }
                
                // action toolbar for ${getName(relationship)}
                ${ addActionToolbar(entity, 'navigationToolbar', getActions(entity).findAll { !it.isStatic() }, false) }
                
                enableButtons(store.getModel().getItem(i));
            })(i);
        
            form = new qx.ui.form.Form();
            formController = new qx.data.controller.Form(null, form);
            
            ${ buildForm(null, 'form', getFormFields(entity), false, false) }
            
            bindingId = store.bind("model[" + i + "].values", formController, "model");
            
            children.push({controller: formController, widget: container, form: form, bindingId: bindingId});
            container.getLayout().setColumnAlign(0, "left", "top");
            var formRenderer = cloudfier.lib.buildFormRenderer(form);
            container.add(formRenderer, {row: 1, column: 0, colSpan: 1});
            childComposite.add(container, {row: row++, column: 0, colSpan: 1});
        }
    });
    
}) ($tabView, $store);
"""
}

def buildEntityWindow(entity, mode, recordVar, successHandlerVar, propertyFilter = { true }, creation = false) {
    def propertiesToRender = getFormFields(entity).findAll(propertyFilter)
"""
(function(record, successHandler) {
    var ${getSymbol(entity)}EntityWindowLayout = new qx.ui.layout.Grid(3, 3);
    ${getSymbol(entity)}EntityWindowLayout.setColumnWidth(0, 50);
    ${getSymbol(entity)}EntityWindowLayout.setColumnWidth(1, 450);
    ${getSymbol(entity)}EntityWindowLayout.setColumnWidth(2, 50);
    
    var ${getSymbol(entity)}EntityWindow = new qx.ui.window.Window("$mode ${modelToScreen(getLabel(entity))}");
    ${getSymbol(entity)}EntityWindow.setShowMaximize(false);
    ${getSymbol(entity)}EntityWindow.setShowMinimize(false);
    ${getSymbol(entity)}EntityWindow.setShowClose(true);
    ${getSymbol(entity)}EntityWindow.setAlwaysOnTop(true);
    ${getSymbol(entity)}EntityWindow.setModal(true);
    ${getSymbol(entity)}EntityWindow.setLayout(${getSymbol(entity)}EntityWindowLayout);
    
    var entityWindowRow = 0;
    
    var ${getSymbol(entity)}EntityForm = new qx.ui.form.Form();
    
    ${ buildForm(recordVar, "${getSymbol(entity)}EntityForm", propertiesToRender, true, creation) }
    
    var ${getSymbol(entity)}FormRenderer = cloudfier.lib.buildFormRenderer(${getSymbol(entity)}EntityForm);
    ${getSymbol(entity)}EntityWindow.add(${getSymbol(entity)}FormRenderer, {row: entityWindowRow++, column: 0, colSpan: 3});
    
    var ${getSymbol(entity)}EntityController = new qx.data.controller.Form(null, ${getSymbol(entity)}EntityForm);
    
    record.bind("values", ${getSymbol(entity)}EntityController, "model");
    
    var ${getSymbol(entity)}EntityOkBtn = new qx.ui.form.Button("Ok");
    
    ${getSymbol(entity)}EntityWindow.add(${getSymbol(entity)}EntityOkBtn, {row: entityWindowRow++, column: 2});
    ${getSymbol(entity)}EntityOkBtn.addListener("execute", function(e) {
        successHandler();
        ${getSymbol(entity)}EntityWindow.close();
    }, this);

    ${getSymbol(entity)}EntityWindow.setWidth(900);
    ${getSymbol(entity)}EntityWindow.center();
    
    ${getSymbol(entity)}EntityWindow.open();
    
    cloudfier.lib.addStandardWindowListeners(${getSymbol(entity)}EntityWindow, ${getSymbol(entity)}EntityOkBtn, true);
    cloudfier.lib.focusOnFirst(${getSymbol(entity)}EntityForm.getValidationManager().getItems());
})($recordVar, $successHandlerVar);    
"""    
}

def addDataTable(entity) {
"""
(function () {

${addTableModel(entity)}

// Customize the table column model.  We want one that
// automatically resizes columns.
var custom = { tableColumnModel : function(obj) { return new qx.ui.table.columnmodel.Resize(obj); } };
    
// table
var table = ${entityObject(entity)}.table = new qx.ui.table.Table(tableModel, custom).set({
  decorator: null
});

table.setMaxHeight(150);

table.getSelectionModel().addListener("changeSelection", function() {
    console.log("changeSelection for ${entity.name}");
    loadRecord(table.getSelectionModel().getAnchorSelectionIndex(), true);
});


var tcm = table.getTableColumnModel();
${
    def statements = []
    def tabledProperties = tabledProperties(entity)
    def defaultWidth = 70 / (tabledProperties.size() ?: 1)
    tabledProperties.eachWithIndex { property, column ->
        if (property.type.name == 'Boolean') {
             statements << "tcm.setDataCellRenderer($column, new qx.ui.table.cellrenderer.Boolean());"
             statements << "tcm.getBehavior().setWidth($column, '${defaultWidth}%');"
        } else if (property.type.name == 'Integer' || property.type.name == 'Double' || property.type.name == 'Date' || property.type instanceof Enumeration || property.type instanceof StateMachine) {
             statements << "tcm.getBehavior().setWidth($column, '${defaultWidth}%');"
        } else {
             statements << "tcm.getBehavior().setWidth($column, '2*');"
        }
    }
    return statements.join('\n')
}


page.add(table, {row: row++, column: 0, colSpan: 3})

})();
"""
}

def resetField(property) {
    if (property.type instanceof Enumeration || isEntity(property.type)) 
        return "clearValues && ${getSymbol(property)}Widget.resetSelection();"
    else
        return """
clearValues && ${getSymbol(property)}Widget.resetValue();
${getSymbol(property)}Widget.resetValid();
"""
}

def readOnlyLinkWidget(formName, property) {
"""    
var ${getSymbol(property)}Widget = new qx.ui.form.TextField();
${getSymbol(property)}Widget.setReadOnly(true);
${getSymbol(property)}Widget.setAppearance("label");

"""
} 

def multiFormLinkField(formName, property, editable = true, creation = false) {
"""
    ${formLinkField(formName, property, editable, creation)}
"""  
}

def formLinkField(formName, property, editable, creation) {
if (!editable || isReadOnly(property, creation)) {
    return readOnlyLinkWidget(formName, property);
}
"""
var ${getSymbol(property)}Widget = new qx.ui.form.SelectBox();
${getSymbol(property)}Widget.setRequired(${isRequired(property)});

var ${getSymbol(property)}StoreDataManipulator = ${createDataManipulator(property.type)};    
var ${getSymbol(property)}Store = new cloudfier.store.JsonStore(null, { manipulateData: ${getSymbol(property)}StoreDataManipulator });

${getSymbol(property)}Store.setUrl(${getDomainURL('formRecord', property)});

// create a dedicated controller for the select box
var ${getSymbol(property)}Controller = new qx.data.controller.List(null, ${getSymbol(property)}Widget);

var ${getSymbol(property)}Values = [];
${ isRequired(property) ? "" : """
    ${getSymbol(property)}Values.push({shorthand: " - None - ", uri: '' });
"""
}

var populator = function() {
    console.log('Populating ${getSymbol(property)}Values'); 
    while(${getSymbol(property)}Values.length > 0) {
        ${getSymbol(property)}Values.pop();
    }
    ${getSymbol(property)}Store.getModel().forEach(function (item) {
        var uri = item.getUri();
        var shorthand = item.getShorthand();
	    console.log('shorthand: '+ shorthand);
        ${getSymbol(property)}Values.push({uri: uri, shorthand: shorthand});
        ${getSymbol(property)}Controller.setModel(qx.data.marshal.Json.createModel(${getSymbol(property)}Values));
    });
};


// populate when loaded
${getSymbol(property)}Store.addListener("loaded", populator);

${getSymbol(property)}Controller.setDelegate({
    bindItem: function(controller, item, index) {
        // labels for the widget come from the offline array model 
        controller.bindProperty("shorthand", "label", null, item, index);
        controller.bindProperty("uri", "model", null, item, index);
    }
});
"""
}


def multiFormField(formName, property, editable, creation) {
"""
"""
}

def formField(formName, property, editable, creation) {
"""
${"${metaClass(property.type)}Widget"(formName, property, editable, creation)}
"""
}

def readOnlyWidget(formName, property) {
    if (property.type.name == 'Boolean') {
        return """
${basicClassWidget(formName, property, false, false)}
${getSymbol(property)}Widget.setEnabled(false);
"""        
    }
    if (property.type.name == 'Memo') {
        return """
${basicClassWidget(formName, property, false, false)}
${getSymbol(property)}Widget.setReadOnly(true);
var ${getSymbol(property)}DummyWidget = new qx.ui.form.TextField();
${getSymbol(property)}DummyWidget.visibility = "excluded";

"""        
    }    
"""    
var ${getSymbol(property)}Widget = new qx.ui.form.TextField();
${getSymbol(property)}Widget.setReadOnly(true);
${getSymbol(property)}Widget.setAppearance("label");
"""
} 

def ClassWidget(formName, property, editable, creation) {
    if (!editable || isReadOnly(property, creation)) {
        return readOnlyWidget(formName, property);
    }
    return basicClassWidget(formName, property, editable, creation)
}

def basicClassWidget(formName, property, editable, creation) {
"""
var ${getSymbol(property)}Widget = new qx.ui.form.${"${property.type.name}Widget"(formName, property, editable, creation)}();
${getSymbol(property)}Widget.setRequired(${editable && isRequired(property, creation)});
${tryCall(property.type.name + 'Setup', formName, property, editable, creation)}
"""
}

def getFormFieldOptions(property) {
    switch (property.type.name) {
        default: return "{rowSpan: 1}"
    }
}

def tryCall(methodName, Object... arguments) {
    def method = metaClass.methods.find { it.name == methodName }
    return method ? invokeMethod(methodName, arguments) : ""
}

def StringWidget(formName, attribute, editable, creation) { "TextField" }

def MemoWidget(formName, attribute, editable, creation) { "TextArea" }
def MemoSetup(formName, property, editable, creation) { 
"""
"""
}

def IntegerWidget(formName, attribute, editable, creation) {  "Spinner" }

def DoubleWidget(formName, attribute, editable, creation) {  "TextField" }
def DoubleSetup(formName, property, editable, creation) {
if (!editable) return ""
"""
var ${getSymbol(property)}Validator = qx.util.Validate.regExp(${'/^[\\d\\.]+$/'}, "Only numbers are allowed");
${formName}.getValidationManager().add(${getSymbol(property)}Widget,${getSymbol(property)}Validator); 
""" 
}

def BooleanWidget(formName, attribute, editable, creation) {  "CheckBox" }

def DateWidget(formName, property, editable, creation)  {
if (!editable || isReadOnly(property, creation)) {
    return readOnlyWidget(formName, property)
}
return "DateField" 
}
def DateSetup(formName, property, editable, creation)  {
"""
var ${getSymbol(property)}Format = new qx.util.format.DateFormat('yyyy/MM/dd');
${getSymbol(property)}Widget.setDateFormat(${getSymbol(property)}Format);
${ (!editable || isReadOnly(property, creation)) ? 
""" 
    ${getSymbol(property)}Widget.getChildControl("textfield").setReadOnly(true);
    ${getSymbol(property)}Widget.getChildControl("list").setEnabled(false);
""" : ""    
}    
"""
}

def EnumerationWidget(formName, property, editable, creation) {
if (!editable || isReadOnly(property, creation)) {
    return readOnlyWidget(formName, property);
}

"""
var ${getSymbol(property)}Widget = new qx.ui.form.SelectBox();
${getSymbol(property)}Widget.setRequired(${isRequired(property)});

var ${getSymbol(property)}Controller = new qx.data.controller.List(null, ${getSymbol(property)}Widget);
${getSymbol(property)}Controller.setDelegate({bindItem: function(controller, item, index) {
    controller.bindProperty("label", "label", null, item, index);
    controller.bindProperty("data", "model", null, item, index);
}});

var ${getSymbol(property)}Values = [${
    (isRequired(property) ? "" : "{ label: '- None -', data: '' }, ") + property.type.ownedLiterals.collect { "{ label: '${modelToScreen(getLabel(it))}', data: '${getSymbol(it)}' }" }.join(', ')
}];
${getSymbol(property)}Controller.setModel(qx.data.marshal.Json.createModel(${getSymbol(property)}Values));
"""
}

def StateMachineWidget(formName, property, editable, creation) {
"""
var ${getSymbol(property)}Widget = new qx.ui.form.TextField();
${getSymbol(property)}Widget.setAppearance("label");
${getSymbol(property)}Widget.setReadOnly(true);
"""
}

def addActionToolbar(entity, navigationToolbarVar, actions, navigableCollection) {
if (!actions) return ""
"""
    ${ !navigableCollection ? "" : """ 
    ${navigationToolbarVar}.add(new qx.ui.toolbar.Separator());
    """}

    var actionToolbar = ${navigationToolbarVar};
    ${ actions.collect { actionItem(entity, it, navigableCollection) }.join("\n") }
"""
}

def actionItem(entity, action, navigableCollection) {
"""
var ${getSymbol(action)}Btn = new qx.ui.toolbar.Button('${modelToScreen(getLabel(action))}');
${
    getDescription(action) ? "${getSymbol(action)}Btn.setToolTipText('${getDescription(action).replace("'", "\\'")}');" : ""
}
actionToolbar.add(${getSymbol(action)}Btn);
${getSymbol(action)}Btn.addListener("execute", function(e) {
    
    var currentItem = store.getModel().getItem(currentRecord);
    
    var actionUri = ${ action.isStatic() ? getStaticActionURL(entity, action) : "currentItem.getActions().get${action.name.capitalize()}().getUri()" };
    ${
        getParameters(action) ? buildActionWindow('currentItem', action) : "cloudfier.lib.performAction(actionUri);"
    }
    
}, this);

"""
}

def buildActionWindow(recordVar, action) {
"""
    var ${getSymbol(action)}ActionWindowLayout = new qx.ui.layout.Grid(3, 3);
    ${getSymbol(action)}ActionWindowLayout.setColumnWidth(0, 50);
    ${getSymbol(action)}ActionWindowLayout.setColumnWidth(1, 250);
    ${getSymbol(action)}ActionWindowLayout.setColumnWidth(2, 50);
    
    var ${getSymbol(action)}ActionWindow = new qx.ui.window.Window("${modelToScreen(getLabel(action))}");
    ${getSymbol(action)}ActionWindow.setShowMaximize(false);
    ${getSymbol(action)}ActionWindow.setShowMinimize(false);
    ${getSymbol(action)}ActionWindow.setShowClose(true);
    ${getSymbol(action)}ActionWindow.setAlwaysOnTop(true);
    ${getSymbol(action)}ActionWindow.setModal(true);
    ${getSymbol(action)}ActionWindow.setLayout(${getSymbol(action)}ActionWindowLayout);
    
    var actionWindowRow = 0;
    ${
        def i = 0;
        action.ownedComments.collect { comment ->
            i++
            """
            var comment${i} = new qx.ui.basic.Label('${comment.body.replace("'", "\\'")}');
            comment${i}.setAllowGrowX(false);
            comment${i}.setAlignX("center");
            ${getSymbol(action)}ActionWindow.add(comment${i}, {row: actionWindowRow, column: 0, colSpan: 3});
            actionWindowRow++;
            """
        }.join('\n')
    }

    var ${getSymbol(action)}ActionForm = new qx.ui.form.Form();
    
    ${ buildForm(recordVar, "${getSymbol(action)}ActionForm", getParameters(action), true, true) }
    
    var ${getSymbol(action)}ActionFormRenderer = new qx.ui.form.renderer.Single(${getSymbol(action)}ActionForm);
    ${getSymbol(action)}ActionWindow.add(${getSymbol(action)}ActionFormRenderer, {row: actionWindowRow++, column: 0, colSpan: 3});
    
    var ${getSymbol(action)}ActionController = new qx.data.controller.Form(null, ${getSymbol(action)}ActionForm);
    var ${getSymbol(action)}ActionModel = ${getSymbol(action)}ActionController.createModel();
    
    var ${getSymbol(action)}ActionOkBtn = new qx.ui.toolbar.Button("Ok");
    
    ${getSymbol(action)}ActionWindow.add(${getSymbol(action)}ActionOkBtn, {row: actionWindowRow++, column: 2});
    ${getSymbol(action)}ActionOkBtn.addListener("execute", function(e) {
        if (!${getSymbol(action)}ActionForm.validate()) {
            return;
        }
        cloudfier.lib.performAction(actionUri, ${getSymbol(action)}ActionModel);
        ${getSymbol(action)}ActionWindow.close();
    }, this);

    ${getSymbol(action)}ActionWindow.setWidth(250);
    ${getSymbol(action)}ActionWindow.center();
    
    ${getSymbol(action)}ActionWindow.open();
    cloudfier.lib.addStandardWindowListeners(${getSymbol(action)}ActionWindow, ${getSymbol(action)}ActionOkBtn, true);
    cloudfier.lib.focusOnFirst(${getSymbol(action)}ActionForm.getValidationManager().getItems());
"""    
}

def addFinderPanel(entity, queries) {
if (!queries) return ""
"""
var ${getSymbol(entity)}QueriesTabView = new qx.ui.tabview.TabView();
${getSymbol(entity)}QueriesTabView.setBarPosition('top');

page.add(${getSymbol(entity)}QueriesTabView, {row: row++, column: 0, colSpan: 3});

    
${ queries.collect { addFinderForm(null, entity, it) }.join('\n') }
    
"""
}

def addFinderForm(recordVar, entity, finder) {
"""
    var ${getSymbol(finder)}FinderPage = new qx.ui.tabview.Page('${modelToScreen(getLabel(finder))}');
    var ${getSymbol(finder)}FinderPageLayout = new qx.ui.layout.Grid(2, 2);
    ${getSymbol(finder)}FinderPageLayout.setColumnWidth(0, 200);
    ${getSymbol(finder)}FinderPageLayout.setColumnWidth(1, 100);
    ${getSymbol(finder)}FinderPageLayout.setColumnWidth(2, 100);
    ${getSymbol(finder)}FinderPage.setLayout(${getSymbol(finder)}FinderPageLayout);    
    
    ${getSymbol(entity)}QueriesTabView.add(${getSymbol(finder)}FinderPage);
    
    var ${getSymbol(finder)}FinderForm = new qx.ui.form.Form();
    
    ${ buildForm(null, "${getSymbol(finder)}FinderForm", getParameters(finder), true, false) }
    
    var ${getSymbol(finder)}FinderController = new qx.data.controller.Form(null, ${getSymbol(finder)}FinderForm);
    var ${getSymbol(finder)}FinderModel = ${getSymbol(finder)}FinderController.createModel();
    
    var ${getSymbol(finder)}FormRenderer = new qx.ui.form.renderer.Single(${getSymbol(finder)}FinderForm);
    ${getSymbol(finder)}FinderPage.add(${getSymbol(finder)}FormRenderer, {row: 0, column: 0, colSpan: 3});
    
    var ${getSymbol(finder)}FilterBtn = new qx.ui.toolbar.Button('Filter');
    ${getSymbol(finder)}FinderPage.add(${getSymbol(finder)}FilterBtn, {row: 1, column: 1});
    ${getSymbol(finder)}FilterBtn.addListener("execute", function(e) {
        if (!${getSymbol(finder)}FinderForm.validate()) {
            return;
        }
        //TODO queries are like totally broken
        //var filterFinder = ${ buildFormFinder(finder, getParameters(finder).findAll { !isEntity(it.type) }, "${getSymbol(finder)}FinderModel") };
        //store.setUrl(${getFinderURL(entity, finder)} + '?' + filterFinder);
        store.reload();
    }, this);
    
    
    var ${getSymbol(finder)}RemoveFilterBtn = new qx.ui.toolbar.Button('Unfiltered');
    ${getSymbol(finder)}FinderPage.add(${getSymbol(finder)}RemoveFilterBtn, {row: 1, column: 2});
    ${getSymbol(finder)}RemoveFilterBtn.addListener("execute", function(e) {
        ${current()}.reloadStore();
    }, this);
    
    
    
"""
}

def buildSaveFunction(entity, creationUrlExpression) {
"""function(toSave) {
    ${getFormFields(entity).findAll { isReadOnly(it, true) && !isDerived(it) }.collect { "toSave.getValues().reset${getSymbol(it).capitalize()}();" }.join("\n") }
    var saveUri = toSave.getUri();
    var method = "PUT" 
    if (!saveUri) {
        saveUri = ${creationUrlExpression};
        method = "POST"; 
    }
    var req = ${buildRequest('saveUri', 'toSave', 'method')}
    req.addListener("loadEnd", function(e) {
        if (qx.util.Request.isSuccessful(req.getStatus())) {
            // update the grid
            ${current()}.store.reload();
            // update the focus entity and relationships
            ${current()}.reloadRootObject();
        } else {
            // qooxdoo won't load response in case of error
            var response = req._getParsedResponse();
            if (response) {
                var error = qx.util.Serializer.toNativeObject(response, (function() {}));
                if (error) {
                    alert(error.message);
                }
            }            
        }
    }, this);
    
    req.send();
}"""
}

/** 
    Generates a function that will fetch a template object for the given entity and open a dialog for editing the instance.
    Only properties that satisfy the property filter are shown. 
    On confirmation, invokes the given save function.
*/    
def addButtonListener(entity, saveFunction, propertyFilter = { true }) {
"""function(e) {
        var templateUri = ${getInstancesURL(entity)} + '_template';
        var req = new qx.io.request.Xhr(templateUri, "GET");
        req.addListener("success", function(e) {
            var templateData = req.getResponse();
            ${ recordConverter(entity, 'templateData', true, true) }
            var toCreate = qx.data.marshal.Json.createModel(templateData);
            var successHandler = function () {
                ${saveFunction}(toCreate);
            };
            ${buildEntityWindow(entity, 'Add new', 'toCreate', 'successHandler', propertyFilter, true)}          
        }, this);
        req.send();
    }"""
}

def addCrudToolbar(navigationToolbarVar, entity, editableCollection, navigableCollection, unlinkableCollection = false) {
"""
    var enableButtons
    
    var navToolbarPart = new qx.ui.toolbar.Part();
    
    var validationState = { };

${ !navigableCollection ? "" : """    
    var linkBtn = new qx.ui.toolbar.Button(null, cloudfier.qooxdooBase + "resource/qx/icon/" + cloudfier.qooxdooTheme + "/devices/network-wired.png")
    linkBtn.setToolTipText("Link to another object");
    navToolbarPart.add(linkBtn);
    linkBtn.addListener("execute", function(e) {
        cloudfier.linking.link(store.getModel().getItem(currentRecord).getUri(), function () {
            // update the grid
            ${current()}.store.reload();
            // update the focus entity and relationships
            ${current()}.reloadRootObject();        
        });
    }, this);
"""}          
    
${ !navigableCollection ? "" : """
    var firstBtn = new qx.ui.toolbar.Button(null, cloudfier.qooxdooBase + "resource/qx/icon/" + cloudfier.qooxdooTheme + "/actions/go-first.png")
    firstBtn.setToolTipText("Go to first record");
    navToolbarPart.add(firstBtn);
    firstBtn.addListener("execute", function(e) {
        loadRecord(0); 
    }, this);

    var previousBtn = new qx.ui.toolbar.Button(null, cloudfier.qooxdooBase + "resource/qx/icon/" + cloudfier.qooxdooTheme + "/actions/go-previous.png")
    previousBtn.setToolTipText("Go to previous record");
    navToolbarPart.add(previousBtn);
    previousBtn.addListener("execute", function(e) {
        loadRecord(Math.max(currentRecord - 1, 0));
    }, this);
"""}

${ !(editableCollection) ? "" : "var save = ${buildSaveFunction(entity, 'store.getUrl()')};" }

${ !(editableCollection && navigableCollection) ? "" : """
    var addBtn = new qx.ui.toolbar.Button(null, cloudfier.qooxdooBase + "resource/qx/icon/" + cloudfier.qooxdooTheme + "/actions/document-new.png")
    addBtn.setToolTipText("Add a new record");
    navToolbarPart.add(addBtn);
    addBtn.addListener("execute", ${addButtonListener(entity, 'save', { !isReadOnly(it) })});
"""
}

${ !editableCollection ? "" : """
    var editBtn = new qx.ui.toolbar.Button(null, cloudfier.qooxdooBase + "resource/qx/icon/" + cloudfier.qooxdooTheme + "/actions/document-properties.png")
    editBtn.setToolTipText("Edit the current record");
    navToolbarPart.add(editBtn);
    editBtn.addListener("execute", function(e) {
        var toEditUri = store.getModel().getItem(currentRecord).getUri();
        var req = new qx.io.request.Xhr(toEditUri, "GET");
        req.addListener("success", function(e) {
            var rawData = req.getResponse();
            ${ recordConverter(entity, 'rawData', true, false) }
            var toUpdate = qx.data.marshal.Json.createModel(rawData);
            var successHandler = function () {
                save(toUpdate);
            };
            ${buildEntityWindow(entity, 'Edit', 'toUpdate', 'successHandler')}
        }, this);
        req.send();
    }, this);
"""}
    
${!editableCollection ? "" : """        
    var deleteBtn = new qx.ui.toolbar.Button(null, cloudfier.qooxdooBase + "resource/qx/icon/" + cloudfier.qooxdooTheme + "/actions/edit-delete.png");
    deleteBtn.setToolTipText("Delete record");
    navToolbarPart.add(deleteBtn);
    deleteBtn.addListener("execute", function(e) {
        var toDelete = store.getModel().getItem(currentRecord).getUri();
        if (toDelete) {
            var req = new qx.io.request.Xhr(toDelete, "DELETE");
            req.addListener("success", function(e) {
                cloudfier.lib.reportFeedback(deleteBtn, 'Record deleted successfully', true);
                // update the grid
                ${current()}.store.reload();
                ${current()}.reloadRootObject();
            }, this);
            req.addListener("statusError", function(e) {
                if (e.getTarget().getStatus() == 401) {
                    cloudfier.lib.showLoginWindow();
                 } else {
                     // qooxdoo won't load response in case of error
                    var response = req._getParsedResponse();
                    if (response) {
                        var error = qx.util.Serializer.toNativeObject(response, (function() {}));
                        if (error) {
                            alert(error.message);
                        } else {
                            alert("Unexpected error response: " + req.getStatus());
                        }
                    }
                }            
            }, this);
            req.send();
        ${!navigableCollection ? "}" : """    
        } else {
            store.getModel().removeAt(currentRecord);
        }
        loadRecord(currentRecord);
        """ }
    }, this);
"""}

${!editableCollection || navigableCollection || !unlinkableCollection ? "" : """        
    var detachBtn = new qx.ui.toolbar.Button(null, cloudfier.qooxdooBase + "resource/qx/icon/" + cloudfier.qooxdooTheme + "/status/image-missing.png");
    detachBtn.setToolTipText("Detach record");
    navToolbarPart.add(detachBtn);
    detachBtn.addListener("execute", function(e) {
        var toDelete = store.getModel().getItem(currentRecord).getRelatedUri();
        if (toDelete) {
            var req = new qx.io.request.Xhr(toDelete, "DELETE");
            req.addListener("success", function(e) {
                cloudfier.lib.reportFeedback(detachBtn, 'Record detached successfully', true);
                // update the current object
                ${current()}.reloadRootObject();
            }, this);
            req.addListener("statusError", function(e) {
                if (e.getTarget().getStatus() == 401) {
                    cloudfier.lib.showLoginWindow();
                 } else {
                     // qooxdoo won't load response in case of error
                    var response = req._getParsedResponse();
                    if (response) {
                        var error = qx.util.Serializer.toNativeObject(response, (function() {}));
                        if (error) {
                            alert(error.message);
                        } else {
                            cloudfier.lib.reportFeedback(detachBtn, "Unexpected error response: " + req.getStatus());
                        }
                    }
                }            
            }, this);
            req.send();
        ${!navigableCollection ? "}" : """    
        } else {
            store.getModel().removeAt(currentRecord);
        }
        loadRecord(currentRecord);
        """ }
    }, this);
"""}


${!navigableCollection ? "" : """    
    var nextBtn = new qx.ui.toolbar.Button(null, cloudfier.qooxdooBase + "resource/qx/icon/" + cloudfier.qooxdooTheme + "/actions/go-next.png")
    nextBtn.setToolTipText("Go to next record");
    navToolbarPart.add(nextBtn);
    nextBtn.addListener("execute", function(e) {
        loadRecord(currentRecord+1);
    }, this);
    
    var lastBtn = new qx.ui.toolbar.Button(null, cloudfier.qooxdooBase + "resource/qx/icon/" + cloudfier.qooxdooTheme + "/actions/go-last.png")
    lastBtn.setToolTipText("Go to last record");
    navToolbarPart.add(lastBtn);
    lastBtn.addListener("execute", function(e) {
        loadRecord(store.getModel().getLength() - 1);
    }, this);
"""}

    ${navigationToolbarVar}.add(navToolbarPart);
    
    var isNewRecord = function () {
        var record = store.getModel().getItem(currentRecord)
        return record && !qx.lang.Type.isString(record.getUri())
    };
    
    enableButtons = function (record) {
        var actions = record && record.getActions();
        var count = store.getModel() ? store.getModel().getLength() : 0;
        var newRecord = ${ !(navigableCollection || editableCollection) ? "false" : "isNewRecord()" };
        ${ enableButton('linkBtn', "cloudfier.linking.isActiveFor('${entity.name}')", editableCollection && navigableCollection) }
//        ${ enableButton('detachBtn', 'count > 0', editableCollection && !navigableCollection) }
        ${ enableButton('deleteBtn', 'count > 0', editableCollection) }
        ${ enableButton('previousBtn', '!newRecord && count > 0 && currentRecord > 0', navigableCollection) }
        ${ enableButton('nextBtn', '!newRecord && currentRecord < count - 1', navigableCollection) }
        ${ enableButton('editBtn', 'count > 0', editableCollection) }
        ${ enableButton('firstBtn', '!newRecord && count > 1 && currentRecord > 0', navigableCollection) }
        ${ enableButton('lastBtn', '!newRecord && count > 1 && currentRecord < count - 1', navigableCollection) }
        ${ 
            getActions(entity).findAll {!it.isStatic()}.collect { action ->
                showButton("${getSymbol(action)}Btn", "actions !== undefined  && actions.get${action.name.capitalize()}().getEnabled()")  
            }.join('\n')
        }
        ${ 
            getRelationships(entity).findAll { isChildTabRelationship(it) && isChildRelationship(it) && !isReadOnly(it)}.collect { relationship ->
                showButton("${getSymbol(relationship)}AddButton", "record");
            }.join('\n')
        }
        ${ 
            //getRelationships(entity).findAll { isChildTabRelationship(it) && isLinkRelationship(it) && !isReadOnly(it)}.collect { relationship ->
            //    showButton("${getSymbol(relationship)}LinkButton", "record");
            //}.join('\n')
        }        
    };
"""
}

def showButton(button, rtCondition, cgCondition = true) {
    cgCondition ? "${button}.setVisibility((${rtCondition}) ? 'visible': 'excluded');" : ""
}

def enableButton(button, rtCondition, cgCondition = true) {
    cgCondition ? "${button}.setEnabled(${rtCondition});" : ""
}
