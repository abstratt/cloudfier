def generate(org.eclipse.uml2.uml.Package single) {
    return generateAll([single]).join("\n")
}

def generateAll(List<org.eclipse.uml2.uml.Package> namespaces) {
"""

cloudfier = qx.lang.Object.mergeWith(cloudfier || {}, {
    applicationName : '${modelToScreen(getLabel(namespaces[0]))}',
    apiBase : location.href.replace('/ui/', '/api/').replace('mobile/source/', '').replace(/\\?.*/, '').replace(/\\#.*/, ''),
    registry : ${buildRegistry(namespaces)},
    lib : { 
        showLoginWindow : function () {
            cloudfier.mobile.loginPage.show();
        }
    },
    mobile : {
        loginPage : undefined
    }
});

${ defineJsonStore() }
${ createStores(namespaces) }

/**
 * Shows a list of instances for an entity.
 */
qx.Class.define("cloudfier.mobile.page.InstanceNavigationPage",
{
  extend : qx.ui.mobile.page.NavigationPage,

  construct : function(title, entityObject, detailProperties)
  {
    this.base(arguments);
    this.entityObject = entityObject;
    this.detailProperties = detailProperties || [];
    this.setTitle(title);
    this.setShowBackButton(true);
    this.setBackButtonText("Back");
  },
  
  properties : {
  },

  members :
  {
    // overridden
    _initialize : function()
    {
      this.base(arguments);
      var me = this;
      var list = this.list = new qx.ui.mobile.list.List({
        configureItem : function(item, data, row)
        {
          item.setTitle(data.getShorthand());
          var details = [], value, detail;
          for (name in me.detailProperties) {
              value = data.getValues().get(name);
              if (value && value != null) {
                  detail = me.detailProperties[name].label;
                  if (value !== true)
                      detail += ": " + value
                  details.push(detail);
              }
          }
          item.setSubtitle(details.join(", "));
          item.setShowArrow(true);
          item.data = data;
        }
      });
      this.entityObject.store.bind("model", list, "model");
      this.getContent().add(list);
      list.addListener("changeSelection", function(evt) {
        var uri = list.getModel().toArray()[evt.getData()].getUri();
        this.entityObject.pages.form.uri = uri;
        this.entityObject.pages.form.show();
      }, this);
    },
    _start : function() {
        this.base(arguments);
        this.entityObject.reloadStore();
    },
    _back : function()
    {
     qx.core.Init.getApplication().getRouting().executeGet("/", {reverse:true});
    }
  }
});

${ buildEntityNavigator(getEntities(namespaces).findAll { isTopLevel(it) && isConcreteEntity(it) }) }

qx.Class.define("kirra.Application",
{
  extend : qx.application.Mobile,

  events: {
     "currentUserChanged" : "qx.event.type.Data"
  },

  properties : {
    routing : {
      init: null
    }
  },

  /*
  *****************************************************************************
     MEMBERS
  *****************************************************************************
  */

  members :
  {
    /**
     * This method contains the initial application code and gets called 
     * during startup of the application
     */
    main : function()
    {
      // Call super class
      this.base(arguments);

      // Enable logging in debug variant
      if (qx.core.Environment.get("qx.debug"))
      {
        // support native logging capabilities, e.g. Firebug for Firefox
        qx.log.appender.Native;
        // support additional cross-browser console. Press F7 to toggle visibility
        qx.log.appender.Console;
      }

      var isTablet = (qx.core.Environment.get("device.type") == "tablet");
      var isDesktop = (qx.core.Environment.get("device.type") == "desktop");

      cloudfier.application = this;
      
      document.title = cloudfier.applicationName;

      var mainPage = new cloudfier.mobile.page.EntityNavigator();
      var manager = new qx.ui.mobile.page.Manager(isTablet);
      manager.addMaster(mainPage);

/*      
      var drawer = new qx.ui.mobile.container.Drawer();
      drawer.setOrientation("left");
      drawer.setTouchOffset(100);
      drawer.setEnabled(false);
    
      var loginLogoutButton = new qx.ui.mobile.form.Button();
      drawer.add(loginLogoutButton);
      
      loginLogoutButton.addListener("tap", function() {
          if (cloudfier.corelib.isLoggedIn()) {
              cloudfier.corelib.logout();
          } else {
              cloudfier.lib.showLoginWindow();
          }
          drawer.hide();
      }, this);
 */     
 
      this.addListener("currentUserChanged", function () {
        mainPage.setBackButtonText(cloudfier.corelib.isLoggedIn() ? "Log out" : "Log in");
        if (!cloudfier.corelib.isLoggedIn()) {
            cloudfier.lib.showLoginWindow();
        }
      });
      
      cloudfier.corelib.refreshCurrentUser();
      
      ${ buildLoginPage() }
      
      manager.addDetail(cloudfier.mobile.loginPage);
      // Initialize the navigation
      var nm = new qx.application.Routing();
      
      ${getEntities(namespaces).findAll { isConcreteEntity(it) }.collect {
          """
          ${entityObject(it)}.pages = {};
          ${buildInstanceNavigator(it)}
          ${buildInstanceForm(it)}
          """
      }.join('\n') }
      
      nm.onGet("/", function(data) {
        mainPage.show();
      },this);
      
      this.setRouting(nm); 

      nm.init();
    }
  }
});
"""
}

/** 
  Builds a form for the given entity. 
  This form can be used for viewing and editing an existing instance or enter 
  information for a new instance of the corresponding entity.
  
  It allows viewing and manipulating related objects as well.
 */
def buildInstanceForm(entity) {
"""
qx.Class.define("cloudfier.mobile.page.${getSymbol(entity)}InstanceForm",
{
  extend : qx.ui.mobile.page.NavigationPage,

  construct : function()
  {
    this.base(arguments);
    this.setShowBackButton(true);
    this.setBackButtonText("Back");
  },

  events :
  {
    /** The page to show */
    "show" : "qx.event.type.Data"
  },

  members :
  {
    // overridden
    _initialize : function()
    {
      this.base(arguments);
      
      this.setTitle("New ${modelToScreen(getLabel(entity))}");
      
      var toolbar = this.toolbar = new qx.ui.mobile.toolbar.ToolBar();
      this.add(toolbar);

      var actionMenuButton = this.actionMenuButton = new qx.ui.mobile.form.Button("Actions");
      var actionMenu = this.actionMenu = new qx.ui.mobile.dialog.Menu(new qx.data.Array([]), actionMenuButton);
      actionMenu.setTitle("Actions");
      actionMenuButton.addListener("tap", function(e) {
          actionMenu.show();
      }, this);
      actionMenu.addListener("tap", function(e) {
         alert("Actions not implemented yet");
      }, this);
      this.actionMenu = actionMenu; 
      toolbar.add(actionMenuButton);

      var form = this.form = new qx.ui.mobile.form.Form();
      
      ${ 
          def mnemonic = getMnemonic(entity)
          def formFields = getFormFields(entity)
          formFields.findAll { !isEntity(it.type) && (it != mnemonic || isEditable(it))}.collect { buildFormWidget('form', it, true, false) }.join("\n\n") 
      } 
    
      var instanceFormRenderer = new qx.ui.mobile.form.renderer.Single(form);
      
      ${ !hasChildTabRelationship(entity) ? "" : """
        var tabBar = new qx.ui.mobile.tabbar.TabBar();
        this.getContent().add(tabBar);
        
        var __instanceDetailsTabButton = new qx.ui.mobile.tabbar.TabButton("Details");
        tabBar.add(__instanceDetailsTabButton);
        __instanceDetailsTabButton.setView(instanceFormRenderer);
        
        ${ getChildTabRelationships(entity).collect { """
            var ${getName(it)}TabButton = new qx.ui.mobile.tabbar.TabButton("${modelToScreen(getLabel(it))}");
            //${getName(it)}TabButton.setView(view1);
            tabBar.add(${getName(it)}TabButton);
        """ }.join("\n") }
      """ }
      
      this.getContent().add(instanceFormRenderer);
      
      var button = new qx.ui.mobile.form.Button("Save");
      button.addListener("tap", function () {
          alert("Saving not implemented yet");
      });
      toolbar.add(button);
    },
    _start : function() {
        var me = this;
        cloudfier.tasker.schedule({
            uri: me.uri,
            context: null,
            run: function (next) {
                var req = new qx.io.request.Xhr(this.uri, "GET");
                req.addListener("success", function(e) {
                    try {
                        ${entityObject(entity)}.currentUri = this.uri;
			            var rawData = req.getResponse();
			            ${ recordConverter(entity, 'rawData', false, false) }
			            var reloaded = qx.data.marshal.Json.createModel(rawData);
			            ${
			                def mnemonic = getMnemonic(entity)
	                        def formFields = getFormFields(entity)
			                formFields.findAll { !isEntity(it.type) && (it != mnemonic || isEditable(it)) }.collect { 
			                "me.${getSymbol(it)}Widget.setValue(reloaded.getValues().get${getSymbol(it).capitalize()}());"
			                }.join("\n\n")
			            }
			            var actions = reloaded && reloaded.getActions();
			            ${ populateInstanceActionMenu(entity, "actions", "me.actionMenu", "me.actionMenuButton") }
			            ${
			                "me.setTitle('${getLabel(entity)}: ' + reloaded.getValues().get${getSymbol(getMnemonic(entity)).capitalize()}())"
			            }
			        } finally {
			            next();
			        }
     	        }, this);
     	        req.addListener("statusError", next);
     	        req.send();
            }
	    });    
        
    },
    _back : function()
    {
     qx.core.Init.getApplication().getRouting().executeGet("/${getSymbol(entity)}", {reverse:true});
    }
  }
});

${entityObject(entity)}.pages.form = new cloudfier.mobile.page.${getSymbol(entity)}InstanceForm();
manager.addDetail(${entityObject(entity)}.pages.form);
"""
}

def populateInstanceActionMenu(entity, actionsRef, actionMenuRef, actionMenuButtonRef) {
"""
    (function () {
        var enabledActionLabels = [];
        ${getInstanceActions(entity).collect { action ->
            """
            if ($actionsRef && ${actionsRef}.get${action.name.capitalize()}().getEnabled()) {
                enabledActionLabels.push('${modelToScreen(action.label)}');
            }
            """    
        }.join("\n") }
        ${actionMenuRef}.setItems(new qx.data.Array(enabledActionLabels));
        ${actionMenuButtonRef}.setEnabled(enabledActionLabels.length > 0);
    })();
"""    
} 

def buildFormWidget(formName, property, editable, creation) {
    """
    ${formField(formName, property, editable, creation)}
    ${formName}.add(${getSymbol(property)}Widget, '${modelToScreen(getLabel(property))}');
    ${getSymbol(property)}Widget.setRequired(${isRequired(property)});
    if (${getSymbol(property)}Widget.setReadOnly) 
        ${getSymbol(property)}Widget.setReadOnly(!${isEditable(property)});
    if (${getSymbol(property)}Widget.setEnabled) 
        ${getSymbol(property)}Widget.setEnabled(${isEditable(property)});
    this.${getSymbol(property)}Widget = ${getSymbol(property)}Widget;
    """
}

def formField(formName, property, editable, creation) {
"""
${"${metaClass(property.type)}Widget"(formName, property, editable, creation)}
"""
}

def readOnlyWidget(formName, property) {
    if (property.type.name == 'Boolean') {
        return """
${basicClassWidget(formName, property, false, false)}
${getSymbol(property)}Widget.setEnabled(false);
"""        
    }
    if (property.type.name == 'Memo') {
        return """
${basicClassWidget(formName, property, false, false)}
${getSymbol(property)}Widget.setReadOnly(true);
"""        
    }    
"""    
var ${getSymbol(property)}Widget = new qx.ui.mobile.form.TextField();
${getSymbol(property)}Widget.setReadOnly(true);
"""
} 


def ClassWidget(formName, property, editable, creation) {
"""
var ${getSymbol(property)}Widget = new ${"${property.type.name}Widget"(formName, property, editable, creation)}();
//${getSymbol(property)}Widget.setRequired(${editable && isRequired(property, creation)});
"""
}

def StringWidget(formName, attribute, editable, creation) { "qx.ui.mobile.form.TextField" }

def MemoWidget(formName, attribute, editable, creation) { "qx.ui.mobile.form.TextArea" }

def BooleanWidget(formName, attribute, editable, creation) { "qx.ui.mobile.form.ToggleButton" }

def DoubleWidget(formName, attribute, editable, creation) { "qx.ui.mobile.form.TextField" }

def IntegerWidget(formName, attribute, editable, creation) { "qx.ui.mobile.form.TextField" }

def DateWidget(formName, attribute, editable, creation) { "qx.ui.mobile.form.TextField" }

def StateMachineWidget(formName, property, editable, creation) {
"""
var ${getSymbol(property)}Widget = new qx.ui.mobile.form.TextField();
//${getSymbol(property)}Widget.setRequired(${editable && isRequired(property, creation)});
"""
}

def EnumerationWidget(formName, property, editable, creation) {
if (!editable || isReadOnly(property, creation)) {
    return readOnlyWidget(formName, property);
}

"""
var ${getSymbol(property)}Widget = new qx.ui.mobile.form.SelectBox();
var ${getSymbol(property)}Values = [${
    (isRequired(property) ? "" : "'- None -', ") + 
        property.type.ownedLiterals.collect { 
            "'${modelToScreen(getLabel(it))}'"
        }.join(', ')
    }];
${getSymbol(property)}Widget.setModel(new qx.data.Array(${getSymbol(property)}Values));
${getSymbol(property)}Widget.setRequired(${isRequired(property)});
"""
}


def buildInstanceNavigator(entity) {
"""
    var ${getSymbol(entity)}NavigationPage = new cloudfier.mobile.page.InstanceNavigationPage("${getLabel(entity)}", ${entityObject(entity)}, ${getDetailPropertyNames(entity)});
    ${entityObject(entity)}.pages.instances = ${getSymbol(entity)}NavigationPage;
    manager.addDetail(${getSymbol(entity)}NavigationPage);
    nm.onGet("/${getSymbol(entity)}", function(data)
    {  
      ${entityObject(entity)}.pages.instances.show();
    },this);
    nm.onGet("/${getSymbol(entity)}/form}", function(data)
    {
      ${entityObject(entity)}.pages.form.show();  
    },this);
    
"""
}

def getDetailPropertyNames(entity) {
    def mnemonic = getMnemonic(entity)
    "{" + getProperties(entity).findAll { it != mnemonic && isUserVisible(it) }.collect { "${it.name} : { label: '${modelToScreen(getLabel(it))}' }" }.join(", ") + "}"
}

def buildEntityNavigator(entities) {
"""
/**
 * Mobile page responsible for showing the different showcases.
 */
qx.Class.define("cloudfier.mobile.page.EntityNavigator",
{
  extend : qx.ui.mobile.page.NavigationPage,

  construct : function()
  {
    this.base(arguments);
    this.setTitle("Overview");
    this.setShowBackButton(true);
    this.setBackButtonText("Log out");
  },


  events :
  {
    /** The page to show */
    "show" : "qx.event.type.Data"
  },


  members :
  {
    // overridden
    _initialize : function()
    {
      this.base(arguments);

      var list = new qx.ui.mobile.list.List({
        configureItem : function(item, data, row)
        {
          item.setTitle(data.title);
          item.setSubtitle(data.subtitle);
          item.setShowArrow(true);
        }
      });

      var data = [
          ${ entities.collect {
              "{title : '${getLabel(it)}', subtitle : '${getDescription(it).replace("'", "\\'").replace("\n", "\\n")}', path: '${getSymbol(it)}'}"
          }.join(',\n') }
      ];

      list.setModel(new qx.data.Array(data));
      list.addListener("changeSelection", function(evt) {
        var path = data[evt.getData()].path;
        qx.core.Init.getApplication().getRouting().executeGet("/"+path);
      }, this);

      this.getContent().add(list);

    },
    _back : function()
    {
        if (this.getBackButtonText() == "Log out") {
            cloudfier.corelib.logout();
            this.setBackButtonText("Log in");
            cloudfier.lib.showLoginWindow();
        } else {
            cloudfier.lib.showLoginWindow();
        }
    }
  }
});
"""
}

def buildLoginPage() {
"""
(function() {
    var page = cloudfier.mobile.loginPage = new qx.ui.mobile.page.NavigationPage();
    page.setTitle("Login");
    page.addListener("start", function() {
        page.form.reset();
    });
    page.addListener("initialize", function() {
      var form = new qx.ui.mobile.form.Form();
      page.form = form;
    
      // User name
      var user = new qx.ui.mobile.form.TextField();
      user.setRequired(true);
      form.add(user, "Username");
    
      // Password
      var pwd = new qx.ui.mobile.form.PasswordField();
      pwd.setRequired(true);
      form.add(pwd, "Password");
    
      // Use form renderer
      var renderer = new qx.ui.mobile.form.renderer.Single(form);
      page.getContent().add(renderer);
    
      // login button
      var button = new qx.ui.mobile.form.Button("Login");
      page.getContent().add(button);
    
      button.addListener("tap", function() {
        if (form.validate()) {  // use form validation
            cloudfier.corelib.login(user.getValue(), pwd.getValue(), function (e) {
                if (e.getTarget().getStatus() == 401) {
	                user.setValid(false);
	                user.setInvalidMessage("");
	                pwd.setValid(false);
	                pwd.setInvalidMessage("Invalid username or password!");
	                renderer.showErrorForItem(pwd);
	            }
            }, function () {
                mainPage.show();
            });
        }
      }, this);
    },this);
})();
"""
}